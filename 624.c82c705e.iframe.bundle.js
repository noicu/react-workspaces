"use strict";(self.webpackChunk_projectstorm_react_workspaces_demos=self.webpackChunk_projectstorm_react_workspaces_demos||[]).push([[624],{"./dist/stories/helpers/tools.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{EK:()=>Buttons,d4:()=>CompInternal,CN:()=>SharedArgs,Ee:()=>genVerticalNode,EP:()=>useEngine,vR:()=>useRootModel});var react=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),lodash=__webpack_require__("../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/lodash.js"),emotion_styled_browser_esm=__webpack_require__("../node_modules/.pnpm/@emotion+styled@11.11.0_@emotion+react@11.11.1_@types+react@18.2.14_react@18.2.0/node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"),dist=(__webpack_require__("../node_modules/.pnpm/typeface-open-sans@1.1.13/node_modules/typeface-open-sans/index.css"),__webpack_require__("../packages/core/dist/index.jsx")),defaults_dist=__webpack_require__("../packages/defaults/dist/index.jsx"),jsx_runtime=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");const DefaultDropZoneAlignmentTheme={thickness:30,thicknessIdle:13,lengthIdle:60,background:"#0096ff",backgroundEntered:"orange"},DropZoneAlignmentButtonWidget=props=>{const[entered,setEntered]=(0,react.useState)(!1),ref=(0,react.useRef)(),theme=lodash.merge({},DefaultDropZoneAlignmentTheme,props.theme||{});(0,dist.G2)({forwardRef:ref,mouseEnter:()=>{setEntered(!0)},mouseExit:()=>{setEntered(!1)}}),(0,dist.uy)({forwardRef:ref,engine:props.engine,onDrop:props.handleDrop});const vertical=props.alignment===dist.v2.LEFT||props.alignment===dist.v2.RIGHT;let width=theme.thicknessIdle,height=theme.lengthIdle;return vertical||(width=theme.lengthIdle,height=theme.thicknessIdle),(0,jsx_runtime.jsx)(S.SplitContainer,{thickness:theme.thickness,ref,vertical,alignment:props.alignment,hover:entered,children:(0,jsx_runtime.jsx)(S.SplitContainerIcon,{theme,hover:entered,width,height})})};var S;DropZoneAlignmentButtonWidget.displayName="DropZoneAlignmentButtonWidget",function(S){S.SplitContainer=emotion_styled_browser_esm.Z.div`
    ${p=>p.alignment}: 0;
    position: absolute;
    width: ${p=>p.vertical?`${p.thickness}px`:"100%"};
    height: ${p=>p.vertical?"100%":`${p.thickness}px`};
    pointer-events: all;
    display: flex;
    align-items: center;
    justify-content: center;
  `,S.SplitContainerIcon=emotion_styled_browser_esm.Z.div`
    border-radius: 2px;
    background: ${p=>p.hover?p.theme.backgroundEntered:p.theme.background};
    transition:
      background 0.3s,
      width ease-out 0.3s,
      height ease-out 0.3s;
    transition-delay: 0.1s;
    pointer-events: none;

    width: ${p=>p.hover?"100%":`${p.width}px`};
    height: ${p=>p.hover?"100%":`${p.height}px`};
  `}(S||(S={})),DropZoneAlignmentButtonWidget.__docgenInfo={description:"",methods:[],displayName:"DropZoneAlignmentButtonWidget"};const DropZoneTransformWidget=props=>{const[entered,setEntered]=(0,react.useState)(!1),ref=(0,react.useRef)();return(0,dist.G2)({forwardRef:ref,mouseEnter:()=>{setEntered(!0)},mouseExit:()=>{setEntered(!1)}}),(0,dist.uy)({forwardRef:ref,engine:props.engine,onDrop:model=>{props.zone.transform({model,zoneModel:props.model,engine:props.engine})}}),(0,jsx_runtime.jsx)(DropZoneTransformWidget_S.Container,{ref,children:props.zone.render({entered,theme:props.theme})})};var DropZoneTransformWidget_S;DropZoneTransformWidget.displayName="DropZoneTransformWidget",function(S){S.Container=emotion_styled_browser_esm.Z.div``}(DropZoneTransformWidget_S||(DropZoneTransformWidget_S={})),DropZoneTransformWidget.__docgenInfo={description:"",methods:[],displayName:"DropZoneTransformWidget"};const DefaultDropZoneLayerPanelTheme={border:2,blur:0,borderColor:"transparent",borderColorEntered:"#0096ff",background:"transparent",borderRadius:10,backgroundEntered:"rgba(0, 0, 0, 0.4)"},DropZoneLayerPanelWidget=props=>{const ref=(0,react.useRef)(),[show,setShow]=(0,react.useState)(!1),theme=lodash.merge({},DefaultDropZoneLayerPanelTheme,props.theme||{});return(0,jsx_runtime.jsx)(dist.CH,{forwardRef:ref,mouseEnter:()=>{setShow(!0)},mouseExit:()=>{setShow(!1)},children:(0,jsx_runtime.jsx)(DropZoneLayerPanelWidget_S.DimensionTracking,{theme,entered:show,dimension:props.model.r_dimensions,children:(0,jsx_runtime.jsxs)(DropZoneLayerPanelWidget_S.Inside,{ref,children:[(0,jsx_runtime.jsx)(DropZoneLayerPanelWidget_S.Layer,{visible:show,children:props.directive.splitZones.map((d=>(0,jsx_runtime.jsx)(DropZoneAlignmentButtonWidget,{model:props.model,engine:props.engine,alignment:d.alignment,handleDrop:model=>{d.handleDrop(model,props.engine)},theme:theme.splitButtonTheme},d.alignment)))}),(0,jsx_runtime.jsxs)(DropZoneLayerPanelWidget_S.Layer2,{visible:show,children:[(0,jsx_runtime.jsx)(DropZoneLayerPanelWidget_S.ButtonBar,{children:props.directive.transformZones.map((zone=>(0,jsx_runtime.jsx)(DropZoneTransformWidget,{theme:theme.transformButtonTheme,model:props.model,zone,engine:props.engine},zone.key)))}),props.debug?(0,jsx_runtime.jsx)(DropZoneLayerPanelWidget_S.Debug,{children:props.model.id.substring(0,7)}):null]})]})})})};var DropZoneLayerPanelWidget_S;DropZoneLayerPanelWidget.displayName="DropZoneLayerPanelWidget",function(S){S.DimensionTracking=(0,emotion_styled_browser_esm.Z)(dist.tv)`
    border-radius: ${p=>p.theme.borderRadius}px;
    box-sizing: border-box;
    background: ${p=>p.entered?p.theme.backgroundEntered:p.theme.background};
    border: solid ${p=>p.theme.border}px ${p=>p.entered?p.theme.borderColorEntered:p.theme.borderColor};
    transition:
      border 0.5s,
      background 0.5s;
    pointer-events: all;
    ${p=>p.theme.blur?` backdrop-filter: blur(${p.theme.blur}px)`:""};
  `,S.Debug=emotion_styled_browser_esm.Z.span`
    font-size: 10px;
    color: white;
  `,S.ButtonBar=emotion_styled_browser_esm.Z.div`
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
  `,S.Layer=emotion_styled_browser_esm.Z.div`
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    pointer-events: none;
    opacity: ${p=>p.visible?1:0};
    transition: opacity 0.3s;
  `,S.Layer2=emotion_styled_browser_esm.Z.div`
    position: absolute;
    box-sizing: border-box;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    padding: 20px;
    pointer-events: none;
    opacity: ${p=>p.visible?1:0};
    transition: opacity 0.3s;
  `,S.Inside=emotion_styled_browser_esm.Z.div`
    box-sizing: border-box;
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  `}(DropZoneLayerPanelWidget_S||(DropZoneLayerPanelWidget_S={})),DropZoneLayerPanelWidget.__docgenInfo={description:"",methods:[],displayName:"DropZoneLayerPanelWidget"};class DropZoneLayer extends dist.mh{constructor(options2){super({mouseEvents:!1}),this.options2=options2}renderLayer(event){return(0,jsx_runtime.jsx)(DropZoneLayerWidget,{debugModels:this.options2.debugModels,engine:event.engine,draggingModel:this.options2.modelID,getDropZoneForModel:this.options2.getDropZoneForModel,theme:this.options2.theme})}}const DropZoneLayerWidget=props=>{var _a;const draggingModelFlattened=(null===(_a=props.engine.rootModel.flatten().find((m=>m.id===props.draggingModel)))||void 0===_a?void 0:_a.flatten())||[];return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:props.engine.rootModel.flatten().filter((m=>m.r_visible)).filter((m=>!draggingModelFlattened.find((child=>child.id===m.id)))).map((m=>{const directive=props.getDropZoneForModel(m);return directive?(0,jsx_runtime.jsx)(DropZoneLayerPanelWidget,{debug:props.debugModels,directive,engine:props.engine,model:m,theme:props.theme},m.id):null}))})};DropZoneLayerWidget.__docgenInfo={description:"",methods:[],displayName:"DropZoneLayerWidget"};var index_es=__webpack_require__("../node_modules/.pnpm/@fortawesome+react-fontawesome@0.2.0_@fortawesome+fontawesome-svg-core@6.4.0_react@18.2.0/node_modules/@fortawesome/react-fontawesome/index.es.js");const DefaultDropZoneLayerButtonTheme={background:"transparent",backgroundEntered:"rgba(255, 165, 0, 0.56)",borderColor:"#0096ff",borderColorEntered:"orange",borderSize:2,borderRadius:5,icon:{color:"white",size:22},text:{color:"white",size:11}},DropZoneLayerButtonWidget=props=>{const theme=lodash.merge({},DefaultDropZoneLayerButtonTheme,props.theme||{});return(0,jsx_runtime.jsxs)(DropZoneLayerButtonWidget_S.Container,{theme,entered:props.entered,children:[(0,jsx_runtime.jsx)(DropZoneLayerButtonWidget_S.Icon,{theme,icon:props.icon}),(0,jsx_runtime.jsx)(DropZoneLayerButtonWidget_S.Text,{theme,children:props.text})]})};var DropZoneLayerButtonWidget_S;DropZoneLayerButtonWidget.displayName="DropZoneLayerButtonWidget",function(S){S.Icon=(0,emotion_styled_browser_esm.Z)(index_es.G)`
    font-size: ${p=>p.theme.icon.size}px;
    color: ${p=>p.theme.icon.color};
    pointer-events: none;
  `,S.Text=emotion_styled_browser_esm.Z.div`
    font-size: ${p=>p.theme.text.size}px;
    color: ${p=>p.theme.text.color};
    padding-top: 5px;
    pointer-events: none;
  `,S.Container=emotion_styled_browser_esm.Z.div`
    border: solid 2px ${p=>p.entered?p.theme.borderColorEntered:p.theme.borderColor};
    box-sizing: border-box;
    background: ${p=>p.entered?p.theme.backgroundEntered:p.theme.background};
    transition:
      border 0.3s,
      background 0.3s;
    pointer-events: all;
    width: 60px;
    height: 60px;
    margin: 2px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    border-radius: 5px;
  `}(DropZoneLayerButtonWidget_S||(DropZoneLayerButtonWidget_S={})),DropZoneLayerButtonWidget.__docgenInfo={description:"",methods:[],displayName:"DropZoneLayerButtonWidget"};var fontawesome_svg_core=__webpack_require__("../node_modules/.pnpm/@fortawesome+fontawesome-svg-core@6.4.0/node_modules/@fortawesome/fontawesome-svg-core/index.mjs"),free_solid_svg_icons=__webpack_require__("../node_modules/.pnpm/@fortawesome+free-solid-svg-icons@6.4.0/node_modules/@fortawesome/free-solid-svg-icons/index.mjs");fontawesome_svg_core.vI.add(free_solid_svg_icons.kZ_);const ReplaceZone={key:"REPLACE",render:({entered,theme})=>(0,jsx_runtime.jsx)(DropZoneLayerButtonWidget,{theme,entered,text:"Replace",icon:"copy"}),transform:({model,zoneModel,engine})=>{zoneModel.parent.replaceModel(zoneModel,model),engine.normalize()}},DropzoneDividerWidget=props=>{var _a,_b,_c,_d;const[entered,setEntered]=(0,react.useState)(!1),ref=(0,react.useRef)();(0,dist.G2)({forwardRef:ref,mouseEnter:()=>{setEntered(!0)},mouseExit:()=>{setEntered(!1)}}),(0,dist.uy)({forwardRef:ref,engine:props.engine,onDrop:props.handleDrop});const PULL_INSET=(null===(_a=props.theme)||void 0===_a?void 0:_a.pullInsetLength)||30,PULL_OUTER=(null===(_b=props.theme)||void 0===_b?void 0:_b.pullInsetWidth)||6;let insetsVertical=-1*PULL_OUTER,insetsHorizontal=PULL_INSET;return props.dimension.isPortrait()&&(insetsVertical=PULL_INSET,insetsHorizontal=-1*PULL_OUTER),entered&&(insetsVertical-=5,insetsHorizontal-=5),(0,jsx_runtime.jsx)(DropzoneDividerWidget_S.DimensionTracker,{dimension:props.dimension,children:(0,jsx_runtime.jsx)(DropzoneDividerWidget_S.Container,{colorEnter:(null===(_c=props.theme)||void 0===_c?void 0:_c.colorEnter)||"orange",color:(null===(_d=props.theme)||void 0===_d?void 0:_d.color)||"#0096ff",ref,enter:entered,insetsVertical,insetsHorizontal})})};var DropzoneDividerWidget_S;DropzoneDividerWidget.displayName="DropzoneDividerWidget",function(S){S.DimensionTracker=(0,emotion_styled_browser_esm.Z)(dist.tv)``,S.Container=emotion_styled_browser_esm.Z.div`
    pointer-events: all;
    position: absolute;
    background: ${p=>p.enter?p.colorEnter:p.color};
    border-radius: 5px;
    transition:
      background 0.3s,
      opacity 0.3s,
      left 0.3s,
      top 0.3s,
      bottom 0.3s,
      right 0.3s;
    transition-delay: 0.1s;
    opacity: ${p=>p.enter?1:.1};
    top: ${p=>p.insetsVertical}px;
    left: ${p=>p.insetsHorizontal}px;
    bottom: ${p=>p.insetsVertical}px;
    right: ${p=>p.insetsHorizontal}px;
    user-select: none;
  `}(DropzoneDividerWidget_S||(DropzoneDividerWidget_S={})),DropzoneDividerWidget.__docgenInfo={description:"",methods:[],displayName:"DropzoneDividerWidget"};class DropzoneDividersLayer extends dist.mh{constructor(options2){super({mouseEvents:!1}),this.options2=options2}renderLayer(event){return(0,jsx_runtime.jsx)(DropzoneDividersLayerWidget,{engine:event.engine,theme:this.options2.theme})}}const DropzoneDividersLayerWidget=props=>{const forceUpdate=(0,dist.NW)(!0);return(0,react.useEffect)((()=>props.engine.registerListener({layoutInvalidated:()=>{forceUpdate()}})),[]),(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:props.engine.rootModel.flatten().filter((p=>p instanceof dist.Tb)).flatMap((m=>m.r_divisions.map(((division,index)=>{var _a;return(0,jsx_runtime.jsx)(DropzoneDividerWidget,{theme:null===(_a=props.theme)||void 0===_a?void 0:_a.call(props),engine:props.engine,dimension:division,handleDrop:model=>{m.addModel(model,index),props.engine.normalize()}},division.id)}))))})};DropzoneDividersLayerWidget.__docgenInfo={description:"",methods:[],displayName:"DropzoneDividersLayerWidget"};var model_tabs_dist=__webpack_require__("../packages/model-tabs/dist/index.jsx");const isAligned=(divider,aligned,parent)=>{let beforeDirective=parent.getPanelDirective(divider.before);const afterDirective=parent.getPanelDirective(divider.after);if(beforeDirective.expand!==afterDirective.expand)return!1;let before=divider.before;do{if(before=before.getSibling(aligned),!before)return!0;if(parent.getPanelDirective(before).expand)return!1}while(before);return!1},getAvailableElement=(model,aligned)=>{let width=-1!==[dist.v2.LEFT,dist.v2.RIGHT].indexOf(aligned);const sibling=model.getSibling(aligned);return sibling&&(width&&[model.size.width,model.minimumSize.width,model.maximumSize.width].every(((v,index,arr)=>v===arr[0]))||!width&&[model.size.height,model.minimumSize.height,model.maximumSize.height].every(((v,index,arr)=>v===arr[0])))?getAvailableElement(sibling,aligned):model},ResizeDividerWidget=props=>{const container=props.dividerContainer.dimensions,vertical=props.dividerContainer.vertical,ref=(0,react.useRef)(),[strategy]=(0,react.useState)((()=>((divider,parent)=>{let sizeSnapshot=new Map;const isExpand=model=>parent.getPanelDirective(model).expand,setSize=(model,val)=>{divider.vertical?model.setWidth(val):model.setHeight(val)};return{startMove:()=>{sizeSnapshot=new Map(parent.children.map((c=>parent.vertical?[c,c.size.height]:[c,c.size.width])))},moved:({distanceX,distanceY})=>{const distance=divider.vertical?distanceX:distanceY,alignment=divider.vertical?dist.v2.LEFT:dist.v2.TOP;let{before,after}=divider;(!isExpand(before)&&isExpand(after)||isAligned(divider,alignment,parent))&&(before=getAvailableElement(before,alignment),setSize(before,sizeSnapshot.get(before)+distance)),isExpand(before)&&!isExpand(after)||!isAligned(divider,alignment,parent)?(after=getAvailableElement(after,(0,dist.v4)(alignment)),setSize(after,sizeSnapshot.get(after)-distance)):setSize(before,sizeSnapshot.get(before)+distance)}}})(props.dividerContainer,props.parent)));return(0,react.useEffect)((()=>props.engine.registerListener({layoutInvalidated:()=>{props.dividerContainer.dimensions.invalidate()}})),[]),(0,dist.SF)(Object.assign({forwardRef:ref},strategy)),(0,jsx_runtime.jsx)(ResizeDividerWidget_S.DimensionTracker,{dimension:container,children:(0,jsx_runtime.jsx)(ResizeDividerWidget_S.Container,{onMouseEnter:()=>{container.setHover(!0)},onMouseLeave:()=>{container.setHover(!1)},onMouseDown:()=>{let l;l=()=>{container.setActive(!1),window.removeEventListener("mouseup",l)},window.addEventListener("mouseup",l),container.setActive(!0)},ref,vertical})})};var ResizeDividerWidget_S;ResizeDividerWidget.displayName="ResizeDividerWidget",function(S){S.DimensionTracker=(0,emotion_styled_browser_esm.Z)(dist.tv)``;S.Container=emotion_styled_browser_esm.Z.div`
    pointer-events: all;
    cursor: ${p=>p.vertical?"col-resize":"row-resize"};
    position: absolute;
    top: -${2}px;
    left: -${2}px;
    bottom: -${2}px;
    right: -${2}px;
    user-select: none;
  `}(ResizeDividerWidget_S||(ResizeDividerWidget_S={})),ResizeDividerWidget.__docgenInfo={description:"",methods:[],displayName:"ResizeDividerWidget"};class ResizeDividersLayer extends dist.mh{constructor(){super({mouseEvents:!1})}renderLayer(event){return(0,jsx_runtime.jsx)(ResizeDividersLayerWidget,{engine:event.engine})}}const ResizeDividersLayerWidget=props=>{const forceUpdate=(0,dist.NW)(!0);return(0,react.useEffect)((()=>props.engine.registerListener({layoutInvalidated:()=>{forceUpdate()}})),[]),(0,react.useEffect)((()=>{const listeners=props.engine.rootModel.flatten().map((m=>m.registerListener({visibilityChanged:()=>{forceUpdate()}})));return()=>{listeners.forEach((l=>l()))}}),[]),(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:props.engine.rootModel.flatten().filter((p=>p instanceof dist.Tb)).flatMap((m=>m.getResizeDivisions())).map((m=>(0,jsx_runtime.jsx)(ResizeDividerWidget,{parent:m.before.parent,engine:props.engine,dividerContainer:m},m.dimensions.id)))})};ResizeDividersLayerWidget.__docgenInfo={description:"",methods:[],displayName:"ResizeDividersLayerWidget"};fontawesome_svg_core.vI.add(free_solid_svg_icons.r8p,free_solid_svg_icons.Krp);const AppendToTabGroupZone={key:"ADD_TAB",render:({entered,theme})=>(0,jsx_runtime.jsx)(DropZoneLayerButtonWidget,{theme,entered,text:"Add Tab",icon:"plus"}),transform:({model,zoneModel,engine})=>{zoneModel.parent.addModel(model),engine.normalize()}};var model_tray_dist=__webpack_require__("../packages/model-tray/dist/index.jsx");fontawesome_svg_core.vI.add(free_solid_svg_icons.r8p,free_solid_svg_icons.u7T);const AppendToTrayZone={key:"ADD_ITEM",render:({entered,theme})=>(0,jsx_runtime.jsx)(DropZoneLayerButtonWidget,{theme,entered,text:"Add item",icon:"plus"}),transform:({model,zoneModel,engine})=>{zoneModel.parent.addModel(model),engine.normalize()}},ConvertToTrayZone=trayFactory=>({key:"MAKE_TRAY",render:({entered,theme})=>(0,jsx_runtime.jsx)(DropZoneLayerButtonWidget,{theme,entered,text:"Tray",icon:"table-list"}),transform:({model,zoneModel,engine})=>{const trayModel=trayFactory.generateModel();zoneModel.parent.replaceModel(zoneModel,trayModel),trayModel.addModel(zoneModel),trayModel.addModel(model),engine.normalize()}});var theming_dist=__webpack_require__("../node_modules/.pnpm/@storybook+theming@7.0.26_react-dom@18.2.0_react@18.2.0/node_modules/@storybook/theming/dist/index.mjs");const genVerticalNode=()=>(new dist.Yb).setExpand(!1,!0).setVertical(!0).addModel(new defaults_dist.lO("Panel 1")).addModel(new defaults_dist.lO("Panel 2"));var DebugOptions;!function(DebugOptions){DebugOptions.DebugDividers="DebugDividers",DebugOptions.DebugPanels="DebugPanels",DebugOptions.DebugResizers="DebugResizers",DebugOptions.DebugWindows="DebugWindows"}(DebugOptions||(DebugOptions={}));const SharedArgs={[DebugOptions.DebugPanels]:!1,[DebugOptions.DebugDividers]:!1,[DebugOptions.DebugResizers]:!1,[DebugOptions.DebugWindows]:!1},useRootModel=(model,args)=>((0,react.useEffect)((()=>{model.setDebug(args[DebugOptions.DebugWindows])}),[args[DebugOptions.DebugWindows]]),model),useEngine=(args={})=>{const[debugLayer]=(0,react.useState)((()=>new dist.bf({dividers:args[DebugOptions.DebugDividers],resizeDividers:args[DebugOptions.DebugResizers],panels:args[DebugOptions.DebugPanels]}))),[engine]=(0,react.useState)((()=>{const e=new dist.DA,commonRenderer=new defaults_dist.n8,windowFactory=new defaults_dist.jO,tabFactory=new model_tabs_dist.GX,trayFactory=new defaults_dist.f8({windowFactory,installIconPositionListener:!0,installEngineLockListener:!0}),workspaceNodeFactory=new dist.g1;return e.registerFactory(new defaults_dist.Tm),tabFactory.addRenderer(commonRenderer),trayFactory.addRenderer(commonRenderer),workspaceNodeFactory.addRenderer(commonRenderer),windowFactory.addRenderer(commonRenderer),e.registerFactory(tabFactory),e.registerFactory(trayFactory),e.registerFactory(workspaceNodeFactory),e.registerFactory(windowFactory),(options=>{let layer=null;const{engine}=options;engine.registerListener({modelDragStart:()=>{var _a;layer||(layer=new DropZoneLayer({modelID:engine.draggingID,getDropZoneForModel:options.getDropZoneForModel,debugModels:options.debug,theme:null===(_a=options.getTheme)||void 0===_a?void 0:_a.call(options)}),engine.layerManager.addLayer(layer))},modelDragEnd:()=>{null==layer||layer.remove(),layer=null}})})({engine:e,getDropZoneForModel:model=>{return((node,transformZones=[])=>{if(!(node instanceof dist.xh)&&node.parent instanceof model_tray_dist.AJ)return{transformZones:[ReplaceZone,AppendToTrayZone,...transformZones],splitZones:[]}})(model)||(options=>{const{node,transformZones,generateParentNode}=options;if(!(node instanceof dist.xh)&&node.parent instanceof dist.Tb)return{transformZones:[ReplaceZone,...transformZones||[]],splitZones:[{alignment:node.parent.vertical?dist.v2.LEFT:dist.v2.TOP,handleDrop:(model,engine)=>{const parent=node.parent,m=(null==generateParentNode?void 0:generateParentNode())||new dist.Tb;m.setVertical(!parent.vertical),m.setExpand(model.expandHorizontal,model.expandHorizontal),m.addModel(model),parent.replaceModel(node,m),m.addModel(node),engine.normalize()}},{alignment:node.parent.vertical?dist.v2.RIGHT:dist.v2.BOTTOM,handleDrop:(model,engine)=>{const parent=node.parent,m=(null==generateParentNode?void 0:generateParentNode())||new dist.Tb;m.setVertical(!parent.vertical),m.setExpand(model.expandHorizontal,model.expandHorizontal),m.addModel(model),parent.replaceModel(node,m),m.addModel(node,0),engine.normalize()}}]}})({node:model,transformZones:[(factory=tabFactory,{key:"MAKE_TABS",render:({entered,theme})=>(0,jsx_runtime.jsx)(DropZoneLayerButtonWidget,{theme,entered,text:"Tabs",icon:"layer-group"}),transform:({model,zoneModel,engine})=>{const tabs=factory.generateModel();zoneModel.parent.replaceModel(zoneModel,tabs),tabs.addModel(zoneModel),tabs.addModel(model),engine.normalize()}}),ConvertToTrayZone(trayFactory)],generateParentNode:()=>new dist.Yb})||((node,transformZones=[])=>{if(!(node instanceof dist.xh)&&node.parent instanceof model_tabs_dist.hH)return{transformZones:[ReplaceZone,AppendToTabGroupZone,...transformZones],splitZones:[]}})(model);var factory},debug:!1}),(options=>{let layer=null;const{engine,theme}=options;engine.registerListener({modelDragStart:()=>{layer||(layer=new DropzoneDividersLayer({theme}),engine.layerManager.addLayer(layer))},modelDragEnd:()=>{null==layer||layer.remove(),layer=null}})})({engine:e}),(engine=>{const layer=new ResizeDividersLayer,tryMountLayer=()=>{engine.rootModel&&!layer.isInserted()?engine.layerManager.addLayer(layer):!engine.rootModel&&layer.isInserted()&&layer.remove()};tryMountLayer(),engine.registerListener({modelUpdated:()=>{tryMountLayer()},modelDragStart:()=>{layer.remove()},modelDragEnd:()=>{engine.layerManager.addLayer(layer)}})})(e),e.layerManager.addLayer(debugLayer),e}));return(0,react.useEffect)((()=>{debugLayer.updateOptions({dividers:args.DebugDividers,resizeDividers:args.DebugResizers,panels:args.DebugPanels})}),[args.DebugDividers,args.DebugResizers,args.DebugPanels]),engine},CompInternal=props=>react.createElement(react.Fragment,null,react.createElement(theming_dist.xB,{styles:theming_dist.iv`
          html,
          body,
          #storybook-root {
            height: 100%;
          }
        `}),react.createElement(tools_S.Container,null,react.createElement(dist.Vc,{engine:props.engine,model:props.model}))),Buttons=props=>react.createElement(tools_S.Container2,null,react.createElement(tools_S.Buttons,null,lodash.map(props.btns,((btnCallback,btn)=>react.createElement(tools_S.Button,{onClick:btnCallback,key:btn},btn)))),props.children);var tools_S;!function(S){S.Container2=emotion_styled_browser_esm.Z.div`
    height: 100%;
    width: 100%;
    display: flex;
    flex-direction: column;
    background: rgb(30, 30, 30);
    box-sizing: border-box;
  `,S.Buttons=emotion_styled_browser_esm.Z.div`
    display: flex;
    flex-direction: row;
    align-items: center;
    padding: 5px;
    padding-left: 40px;
  `,S.Button=emotion_styled_browser_esm.Z.div`
    padding: 5px 10px;
    color: white;
    background: black;
    cursor: pointer;
    font-size: 12px;
    font-family: 'Open Sans';
    margin-right: 5px;
    user-select: none;

    &:hover {
      background: rgb(0, 192, 255);
    }
  `,S.Container=emotion_styled_browser_esm.Z.div`
    flex-grow: 1;
    padding: 40px;
    background: rgb(70, 70, 70);
    box-sizing: border-box;
    height: 100%;
    width: 100%;
    overflow: hidden;
    font-family: 'Open Sans';
  `}(tools_S||(tools_S={})),CompInternal.__docgenInfo={description:"",methods:[],displayName:"CompInternal"},Buttons.__docgenInfo={description:"",methods:[],displayName:"Buttons"}},"../packages/core/dist/index.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{v2:()=>Alignment,Ns:()=>Corner,bf:()=>DebugLayer,lY:()=>DimensionContainer,tv:()=>DimensionTrackingWidget,up:()=>DraggableWidget_DraggableWidget,Yb:()=>ExpandNodeModel,mh:()=>Layer,Ly:()=>Position,Oy:()=>SmartOrderingWidget,Rr:()=>SubComponentModelFactory,CH:()=>UseMouseDragEventsRootWidget,xh:()=>WorkspaceCollectionModel,DA:()=>WorkspaceEngine,uU:()=>WorkspaceModel,Wg:()=>WorkspaceModelFactory,g1:()=>WorkspaceNodeFactory,Tb:()=>WorkspaceNodeModel,Vc:()=>WorkspaceWidget,v4:()=>getAlignmentInverted,uy:()=>useDroppableModel,NW:()=>useForceUpdate,KA:()=>useModelElement,SF:()=>useMouseDragDistance,G2:()=>useMouseDragEvents,yU:()=>useResizeObserver,P0:()=>useScrollObserver});var react=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js");const useMouseDragDistance=props=>{(0,react.useEffect)((()=>{const mouseDown=event=>{var _a;if(0!==event.button)return;null===(_a=props.startMove)||void 0===_a||_a.call(props);const mouseMove=event2=>{props.moved({event:event2,distanceX:event2.clientX-event.clientX,distanceY:event2.clientY-event.clientY})},mouseUp=()=>{var _a;null===(_a=props.endMove)||void 0===_a||_a.call(props),window.removeEventListener("mouseup",mouseUp),window.removeEventListener("mousemove",mouseMove)};window.addEventListener("mouseup",mouseUp),window.addEventListener("mousemove",mouseMove)};return props.forwardRef.current.addEventListener("mousedown",mouseDown),()=>{var _a;null===(_a=props.forwardRef.current)||void 0===_a||_a.removeEventListener("mousedown",mouseDown)}}),[])};var v4=__webpack_require__("../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v4.js");class BaseObserver{constructor(){this.listeners={}}registerListener(listener,meta){const id=(0,v4.Z)();return this.listeners[id]={l:listener,meta},()=>{delete this.listeners[id]}}iterateListeners(cb){for(let i in this.listeners)cb(this.listeners[i].l)}}class Size extends BaseObserver{constructor(){super(),this._width=0,this._height=0}get width(){return this._width}get height(){return this._height}set width(width){this.update({width})}valid(){return this.getVolume()>0}set height(height){this.update({height})}get value(){return{width:this._width,height:this._height}}isPortrait(){return this.height>this.width}getVolume(){return this.width*this.height}trackSize(size){return this.update(size.value),size.registerListener({updated:()=>{this.update(size.value)}})}update(size){let updated=!1,old={width:this._width,height:this._height};null!=size.width&&size.width!==this.width&&(this._width=size.width,updated=!0),null!=size.height&&size.height!==this.height&&(this._height=size.height,updated=!0),updated&&this.iterateListeners((cb=>{var _a;return null===(_a=cb.updated)||void 0===_a?void 0:_a.call(cb,{prev:old})}))}}class Position extends BaseObserver{constructor(){super(),this._top=0,this._left=0,this._bottom=0,this._right=0}get top(){return this._top}get left(){return this._left}get bottom(){return this._bottom}get right(){return this._right}getRelativeToPosition(rect){return{top:this._top-rect.top,left:this._left-rect.left,right:this._right-rect.right,bottom:this._bottom-rect.bottom}}getRelativeToMousePosition(position){return{clientX:this._left-position.clientX,clientY:this._top-position.clientY}}update(position){let updated=!1;null!=position[Alignment.TOP]&&position[Alignment.TOP]!==this._top&&(this._top=position[Alignment.TOP],updated=!0),null!=position[Alignment.LEFT]&&position[Alignment.LEFT]!==this._left&&(this._left=position[Alignment.LEFT],updated=!0),null!=position[Alignment.BOTTOM]&&position[Alignment.BOTTOM]!==this._bottom&&(this._bottom=position[Alignment.BOTTOM],updated=!0),null!=position[Alignment.RIGHT]&&position[Alignment.RIGHT]!==this._right&&(this._right=position[Alignment.RIGHT],updated=!0),updated&&this.iterateListeners((cb=>{var _a;return null===(_a=cb.updated)||void 0===_a?void 0:_a.call(cb)}))}}class DimensionContainer extends BaseObserver{constructor(options={}){super(),this.fireUpdated=()=>{this.iterateListeners((cb=>{var _a;return null===(_a=cb.updated)||void 0===_a?void 0:_a.call(cb)}))},this.id=(0,v4.Z)(),this.size=options.size||new Size,this.position=options.position||new Position,this.size.registerListener({updated:()=>{this.fireUpdated()}}),this.position.registerListener({updated:()=>{this.fireUpdated()}})}get dimensions(){return{top:this.position.top,left:this.position.left,bottom:this.position.bottom,right:this.position.right,width:this.size.width,height:this.size.height}}isPortrait(){return this.size.isPortrait()}getVolume(){return this.size.getVolume()}invalidate(immediate){this.iterateListeners((cb=>{var _a;return null===(_a=cb.invalidate)||void 0===_a?void 0:_a.call(cb,immediate)}))}update(dim){this.size.update(dim),this.position.update(dim)}getRelativeToPosition(rect){return this.position.getRelativeToPosition(rect)}getRelativeToMousePosition(position){return this.position.getRelativeToMousePosition(position)}isAligned(parent,alignment){const rel=this.getRelativeToPosition(parent.position)[alignment];return alignment===Alignment.LEFT?rel<=parent.dimensions.width/2:alignment===Alignment.RIGHT?rel>parent.dimensions.width/2:alignment===Alignment.TOP?rel<=parent.dimensions.height/2:alignment===Alignment.BOTTOM?rel>parent.dimensions.height/2:void 0}}var __awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class WorkspaceModelSize extends Size{constructor(min,max){super(),this.min=min,this.max=max,this.min.registerListener({updated:()=>{this.update(this.value)}}),this.max.registerListener({updated:()=>{this.update(this.value)}})}update(size){null!=size.width&&(size.width<this.min.width?size.width=this.min.width:this.max.width>0&&size.width>this.max.width&&(size.width=this.max.width)),null!=size.height&&(size.height<this.min.height?size.height=this.min.height:this.max.height>0&&size.width>this.max.height&&(size.height=this.max.height)),super.update(size)}}class WorkspaceModel extends BaseObserver{constructor(type){super(),this.type=type,this.id=(0,v4.Z)(),this.parent=null,this._expandHorizontal=!0,this._expandVertical=!0,this.minimumSize=new Size,this.maximumSize=new Size,this.size=new WorkspaceModelSize(this.minimumSize,this.maximumSize),this.r_visible=!1,this.r_dimensions=new DimensionContainer,this.r_dimensions.registerListener({updated:()=>{0===this.size.width&&0===this.size.height&&this.setSize({width:this.r_dimensions.dimensions.width,height:this.r_dimensions.dimensions.height})}}),this.size.registerListener({updated:()=>{this.invalidateDimensions()}})}get expandHorizontal(){return this._expandHorizontal}set expandHorizontal(value){this._expandHorizontal=value}get expandVertical(){return this._expandVertical}set expandVertical(value){this._expandVertical=value}waitForInitialRenderedSize(){return __awaiter(this,void 0,void 0,(function*(){return new Promise((resolve=>{let l1,l2;l1=this.r_dimensions.registerListener({updated:()=>{this.r_dimensions.size.width>0&&(resolve(this.r_dimensions.dimensions),null==l1||l1(),null==l2||l2())}}),l2=this.registerListener({visibilityChanged:()=>{this.r_visible&&this.r_dimensions.invalidate(!0)}})}))}))}setWidth(width){this.setSize({width})}setHeight(height){this.setSize({height})}setSize(dims){this.size.update(dims)}getAllRenderDimensions(){return[this.r_dimensions]}invalidateDimensions(){this.iterateListeners((cb=>{var _a;return null===(_a=cb.dimensionsInvalidated)||void 0===_a?void 0:_a.call(cb)}))}invalidateLayout(){this.iterateListeners((cb=>{var _a;return null===(_a=cb.layoutInvalidated)||void 0===_a?void 0:_a.call(cb)}))}setVisible(visible){this.r_visible!==visible&&(this.r_visible=visible,this.iterateListeners((cb=>{var _a;return null===(_a=cb.visibilityChanged)||void 0===_a?void 0:_a.call(cb)})))}fireNodeRemoved(){this.iterateListeners((list=>{list.removed&&list.removed()}))}getSibling(alignment){return this.parent instanceof WorkspaceCollectionModel?this.parent.getChildSibling(this,alignment):null}delete(){this.fireNodeRemoved()}hasParentID(parentID){return this.id===parentID||!!this.parent&&this.parent.hasParentID(parentID)}setParent(parent){this.parent=parent}getRootModel(){return this.parent?this.parent.getRootModel():this}setExpand(horizontal=!0,vertical=!0){return this._expandHorizontal=horizontal,this._expandVertical=vertical,this}flatten(){return[this]}toArray(){return{id:this.id,type:this.type,expandHorizontal:this._expandHorizontal,expandVertical:this._expandVertical,width:this.size.width,height:this.size.height}}fromArray(payload,engine){this.id=payload.id,this._expandHorizontal=payload.expandHorizontal,this._expandVertical=payload.expandVertical,this.size.update({width:payload.width,height:payload.height})}}var lodash=__webpack_require__("../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/lodash.js");class WorkspaceCollectionModel extends WorkspaceModel{constructor(type){super(type),this.children=[]}fromArray(payload,engine){super.fromArray(payload,engine);for(let child of payload.children){let factory;try{factory=engine.getFactory(child.type)}catch(ex){continue}let model=factory.generateModel();model.fromArray(child,engine),this.addModel(model)}}toArray(){return Object.assign(Object.assign({},super.toArray()),{children:this.children.map((child=>child.toArray()))})}isFirstModel(model){return this.children[0].id===model.id}isLastModel(model){return this.children[this.children.length-1].id===model.id}flatten(){const children=lodash.flatMap(this.children.map((c=>c.flatten())));return super.flatten().concat(children)}getFlattened(){let children=[];for(let child of this.children)child instanceof WorkspaceCollectionModel?children=children.concat(child.getFlattened()):children.push(child);return children}replaceModel(oldModel,newModel){let index=this.children.indexOf(oldModel);return oldModel.delete(),this.addModel(newModel,index),this}getModelBefore(model){const index=this.children.indexOf(model);return index<=0?null:this.children[index-1]}getModelAfter(model){const index=this.children.indexOf(model);return index>=this.children.length-1?null:this.children[index+1]}normalize(){this.parent&&this.parent instanceof WorkspaceCollectionModel&&0===this.children.length&&this.parent.removeModel(this)}removeModel(model){let index=this.children.indexOf(model);return-1===index?(console.log("could not find model"),this):(this.children.splice(index,1),this.invalidateLayout(),this)}addModel(model,position=null){if(-1!==this.children.indexOf(model)){const pos=this.children.indexOf(model);this.children.splice(pos,1),pos>position?this.children.splice(position,0,model):this.children.splice(position-1,0,model)}else{model.parent&&model.delete(),model.setParent(this);const listener=model.registerListener({removed:()=>{listener(),this.removeModel(model),this.iterateListeners((list=>{var _a;null===(_a=list.childRemoved)||void 0===_a||_a.call(list,model)}))},layoutInvalidated:()=>{this.invalidateLayout()},dimensionsInvalidated:()=>{this.invalidateDimensions()}});null===position?this.children.push(model):this.children.splice(position,0,model)}return this.invalidateLayout(),this}addModelBefore(relativeModel,model){let index=this.children.indexOf(relativeModel);this.addModel(model,index)}addModelAfter(relativeModel,model){let index=this.children.indexOf(relativeModel);this.addModel(model,index+1)}getChildSibling(model,alignment){return null}}const regenerateIDs=model=>{model instanceof WorkspaceCollectionModel&&model.children.forEach((m=>regenerateIDs(m))),model.id=(0,v4.Z)()};var Alignment;!function(Alignment){Alignment.TOP="top",Alignment.LEFT="left",Alignment.BOTTOM="bottom",Alignment.RIGHT="right"}(Alignment||(Alignment={}));const getAlignmentInverted=alignment=>({[Alignment.TOP]:Alignment.BOTTOM,[Alignment.BOTTOM]:Alignment.TOP,[Alignment.LEFT]:Alignment.RIGHT,[Alignment.RIGHT]:Alignment.LEFT}[alignment]);var Corner;!function(Corner){Corner.TOP_LEFT="nw",Corner.TOP_RIGHT="ne",Corner.BOTTOM_RIGHT="se",Corner.BOTTOM_LEFT="sw"}(Corner||(Corner={}));const log=(...args)=>{console.debug("[SRW] ",...args)},useBaseResizeObserver=props=>{const updateLogic=(0,react.useCallback)((()=>{var _a;if(!props.forwardRef.current)return;let dims=props.forwardRef.current.getBoundingClientRect();const dimObject={width:dims.width,height:dims.height,[Alignment.TOP]:dims.top,[Alignment.LEFT]:dims.left,[Alignment.BOTTOM]:dims.bottom,[Alignment.RIGHT]:dims.right};props.dimension.update((null===(_a=props.transformer)||void 0===_a?void 0:_a.call(props,dimObject))||dimObject)}),[props.dimension]),updateDebounced=(0,react.useCallback)(lodash.debounce((()=>{updateLogic()}),500),[props.dimension]),update=(0,react.useCallback)((()=>{props.ignoreDebounce?updateLogic():updateDebounced()}),[props.dimension,props.ignoreDebounce]);(0,react.useEffect)((()=>props.dimension.registerListener({invalidate:immediate=>{immediate?updateLogic():update()}})),[props.dimension]),(props=>{(0,react.useEffect)((()=>{const listener=()=>{props.resized()};return window.addEventListener("resize",listener),()=>{window.removeEventListener("resize",listener)}}),[])})({resized:()=>{update()}}),(0,react.useEffect)((()=>{const intersectionObserver=new IntersectionObserver((()=>{update()}),{root:document.body});return intersectionObserver.observe(props.forwardRef.current),()=>{props.forwardRef.current&&intersectionObserver.unobserve(props.forwardRef.current),intersectionObserver.disconnect()}}),[props.dimension]),(0,react.useEffect)((()=>{update();const resizeObserver=new ResizeObserver((()=>{update()}));return resizeObserver.observe(props.forwardRef.current),()=>{props.forwardRef.current&&resizeObserver.unobserve(props.forwardRef.current),resizeObserver.disconnect()}}),[props.dimension])},useResizeObserver=props=>{useBaseResizeObserver(Object.assign(Object.assign({},props),{transformer:dims=>Object.assign(Object.assign({},dims),{[Alignment.TOP]:dims[Alignment.TOP]-props.engine.workspaceContainer.position.top,[Alignment.LEFT]:dims[Alignment.LEFT]-props.engine.workspaceContainer.position.left,[Alignment.BOTTOM]:dims[Alignment.BOTTOM]-props.engine.workspaceContainer.position.bottom,[Alignment.RIGHT]:dims[Alignment.RIGHT]-props.engine.workspaceContainer.position.right})})),(props=>{(0,react.useEffect)((()=>{let l2=null;const l1=props.engine.registerListener({layoutInvalidated:()=>{l2=props.engine.registerListener({layoutRepainted:()=>{null==l2||l2(),l2=null,props.dimension.invalidate()}})}});return()=>{l1(),null==l2||l2()}}),[props.dimension])})({engine:props.engine,dimension:props.dimension}),(0,react.useEffect)((()=>props.engine.workspaceContainer.registerListener({updated:()=>{props.dimension.invalidate()}})),[])},useModelElement=props=>{const ref=react.useRef();return useResizeObserver({forwardRef:ref,dimension:props.model.r_dimensions,engine:props.engine}),(0,react.useEffect)((()=>(props.model.setVisible(!0),()=>{props.model.setVisible(!1)})),[props.model]),ref};function useForceUpdate(debounce){const[value,setValue]=(0,react.useState)(0);return()=>{if(debounce)return lodash.debounce((()=>{setValue((value=>value+1))}));setValue((value=>value+1))}}const useScrollObserver=props=>{(0,react.useEffect)((()=>{const cb=()=>{props.dimension.invalidate()};return props.forwardRef.current.addEventListener("scroll",cb),()=>{var _a;null===(_a=props.forwardRef.current)||void 0===_a||_a.removeEventListener("scroll",cb)}}),[])};var jsx_runtime=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");const DropZoneDragContext=react.createContext(null),useMouseDragEvents=props=>{const c=(0,react.useContext)(DropZoneDragContext);(0,react.useEffect)((()=>{const dragEnter=event=>{var _a;c.increment(),null===(_a=props.mouseEnter)||void 0===_a||_a.call(props)},dragLeave=()=>{var _a;c.decrement(),null===(_a=props.mouseExit)||void 0===_a||_a.call(props)};return props.forwardRef.current.addEventListener("dragenter",dragEnter),props.forwardRef.current.addEventListener("dragleave",dragLeave),props.forwardRef.current.addEventListener("drop",dragLeave),()=>{var _a,_b,_c;null===(_a=props.forwardRef.current)||void 0===_a||_a.removeEventListener("dragenter",dragEnter),null===(_b=props.forwardRef.current)||void 0===_b||_b.removeEventListener("dragleave",dragLeave),null===(_c=props.forwardRef.current)||void 0===_c||_c.removeEventListener("drop",dragLeave)}}),[])},UseMouseDragEventsRootWidgetInner=props=>(useMouseDragEvents({forwardRef:props.forwardRef}),props.children),UseMouseDragEventsRootWidget=props=>{const dragCount=(0,react.useRef)(0);return(0,jsx_runtime.jsx)(DropZoneDragContext.Provider,{value:{increment:()=>{var _a;dragCount.current=dragCount.current+1,dragCount.current>0&&(null===(_a=props.mouseEnter)||void 0===_a||_a.call(props))},decrement:()=>{var _a;dragCount.current=dragCount.current-1,0===dragCount.current&&(null===(_a=props.mouseExit)||void 0===_a||_a.call(props))}},children:(0,jsx_runtime.jsx)(UseMouseDragEventsRootWidgetInner,{...props,children:props.children})})};UseMouseDragEventsRootWidget.displayName="UseMouseDragEventsRootWidget",UseMouseDragEventsRootWidget.__docgenInfo={description:"",methods:[],displayName:"UseMouseDragEventsRootWidget"};var useDroppable_awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};var useDraggable_awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};const useDraggable=props=>{(0,react.useEffect)((()=>{const dragStart=event=>{event.stopPropagation();const object=props.encode();if(object){event.dataTransfer.dropEffect="none",event.altKey?(log("dragging as a copy operation"),event.dataTransfer.effectAllowed="copy"):event.dataTransfer.effectAllowed="move";for(let key in object)log(`setting up mime: ${key}`),event.dataTransfer.setData(key,JSON.stringify(object[key]))}},dragEnd=event=>useDraggable_awaiter(void 0,void 0,void 0,(function*(){"none"!==event.dataTransfer.dropEffect?props.dragend({copy:"copy"===event.dataTransfer.dropEffect,success:!0}):props.dragend({copy:!1,success:!1})}));return props.forwardRef.current.addEventListener("dragstart",dragStart),props.forwardRef.current.addEventListener("dragend",dragEnd),()=>{var _a,_b;null===(_a=props.forwardRef.current)||void 0===_a||_a.removeEventListener("dragstart",dragStart),null===(_b=props.forwardRef.current)||void 0===_b||_b.removeEventListener("dragend",dragEnd)}}),[props.forwardRef])},useDragOverModel=props=>{(props=>{(0,react.useEffect)((()=>{const dragOver=event=>{var _a;let found=!1;for(let i=0;i<event.dataTransfer.types.length;++i)props.acceptedTypes.some((type=>event.dataTransfer.types[i].startsWith(type)))&&(found=!0);found&&(props.accept&&event.preventDefault(),null===(_a=props.dragOver)||void 0===_a||_a.call(props,event.dataTransfer.types))};return props.forwardRef.current.addEventListener("dragover",dragOver),()=>{var _a;null===(_a=props.forwardRef.current)||void 0===_a||_a.removeEventListener("dragover",dragOver)}}),[props.forwardRef])})({acceptedTypes:[WORKSPACE_MODEL_MIME],accept:props.accept,dragOver:types=>{var _a;const found=types.find((t=>t.startsWith(WORKSPACE_MODEL_ID_MIME)));if(!found)return;const id=found.substring(WORKSPACE_MODEL_ID_MIME.length);null===(_a=props.dragOver)||void 0===_a||_a.call(props,{modelID:id})},forwardRef:props.forwardRef})},WORKSPACE_MODEL_MIME="srw/model",WORKSPACE_MODEL_ID_MIME="srw/modelid/",useDroppableModel=props=>{useDragOverModel({dragOver:props.onDragover,forwardRef:props.forwardRef,accept:!0}),(props=>{(0,react.useEffect)((()=>{const drop=event=>useDroppable_awaiter(void 0,void 0,void 0,(function*(){let res={};for(let type of event.dataTransfer.types){let data=event.dataTransfer.getData(type);try{res[type]=JSON.parse(data)}catch(ex){console.warn("Failed to deserialize draggable object",ex)}}log("dropped data:",res),props.dropped(res,{position:event,isCopy:"copy"===event.dataTransfer.effectAllowed})}));return props.forwardRef.current.addEventListener("drop",drop),()=>{var _a;null===(_a=props.forwardRef.current)||void 0===_a||_a.removeEventListener("drop",drop)}}),[props.forwardRef])})({dropped:(model,opts)=>{let draggingNode=props.engine.getFactory(model[WORKSPACE_MODEL_MIME].type).generateModel();if(draggingNode.fromArray(model[WORKSPACE_MODEL_MIME],props.engine),opts.isCopy)log("was a copy operation, regenerating ids"),regenerateIDs(draggingNode);else{const found=props.engine.rootModel.flatten().find((m=>m.id===draggingNode.id));draggingNode=found||draggingNode}log("workspace model dropped",draggingNode),props.onDrop(draggingNode)},forwardRef:props.forwardRef})};var emotion_styled_browser_esm=__webpack_require__("../node_modules/.pnpm/@emotion+styled@11.11.0_@emotion+react@11.11.1_@types+react@18.2.14_react@18.2.0/node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js");const DimensionTrackingWidget=props=>{const forceUpdate=useForceUpdate();return(0,react.useEffect)((()=>props.dimension.registerListener({updated:()=>{forceUpdate()}})),[props.dimension]),(0,jsx_runtime.jsx)(S.Container,{ref:props.forwardRef,className:props.className,d:props.dimension.dimensions,animate:props.animateDuration||0,children:props.children})};var S;DimensionTrackingWidget.displayName="DimensionTrackingWidget",function(S){S.Container=emotion_styled_browser_esm.Z.div`
    position: absolute;
    width: ${p=>p.d.width}px;
    height: ${p=>p.d.height}px;
    top: ${p=>p.d.top}px;
    left: ${p=>p.d.left}px;
    ${p=>p.animate>0?`transition: top ${p.animate}ms, left ${p.animate}ms`:""};
  `}(S||(S={})),DimensionTrackingWidget.__docgenInfo={description:"",methods:[],displayName:"DimensionTrackingWidget"};const DividerWidget=props=>{var _a;const ref=(0,react.useRef)(),forceUpdate=useForceUpdate();return(0,react.useEffect)((()=>props.dimensionContainer.registerListener({activeChanged:()=>{forceUpdate()},hoverChanged:()=>{forceUpdate()}})),[]),useResizeObserver({forwardRef:ref,dimension:props.dimensionContainer,engine:props.engine}),(0,jsx_runtime.jsx)(DividerWidget_S.Container,{hoverColor:props.hoverColor,activeColor:props.activeColor,hover:props.dimensionContainer.hover,active:props.dimensionContainer.active,thickness:null!==(_a=props.thickness)&&void 0!==_a?_a:4,ref})};var DividerWidget_S,DraggableWidget_S;DividerWidget.displayName="DividerWidget",function(S){S.Container=emotion_styled_browser_esm.Z.div`
    min-width: 4px;
    min-height: 4px;
    transition: background 0.2s;
    transition-delay: 50ms;
    ${p=>p.hover?`background: ${p.hoverColor}`:""};
    ${p=>p.active?`background: ${p.activeColor}`:""};
  `}(DividerWidget_S||(DividerWidget_S={})),DividerWidget.__docgenInfo={description:"",methods:[],displayName:"DividerWidget"},function(S){S.Draggable=emotion_styled_browser_esm.Z.div`
    cursor: ${p=>p.draggable?"move":"pointer"};
  `}(DraggableWidget_S||(DraggableWidget_S={}));const DraggableWidget_DraggableWidget=props=>{const ref=(0,react.useRef)(),forceUpdate=useForceUpdate();return(props=>{useDraggable({encode:()=>({[WORKSPACE_MODEL_MIME]:props.model.toArray(),[WORKSPACE_MODEL_ID_MIME+props.model.id]:props.model.id}),dragend:({copy,success})=>{success&&!copy&&(props.engine.draggingID||(props.model.delete(),props.engine.normalize())),props.engine.setDraggingNode(null)},forwardRef:props.forwardRef})})({forwardRef:props.forwardRef||ref,model:props.model,engine:props.engine}),(0,react.useEffect)((()=>props.engine.registerListener({lockUpdated:()=>{forceUpdate()}})),[]),(0,jsx_runtime.jsx)(DraggableWidget_S.Draggable,{ref:props.forwardRef||ref,draggable:!props.engine.locked,onDragStart:event=>{props.engine.locked||props.engine.iterateListeners((list=>{list.draggingElement&&list.draggingElement(props.model,!0)}))},onDragEnd:event=>{props.engine.locked||props.engine.iterateListeners((list=>{list.draggingElement&&list.draggingElement(props.model,!1)}))},...props,children:props.children})};var DropzoneLogicWidget_S;DraggableWidget_DraggableWidget.displayName="DraggableWidget",DraggableWidget_DraggableWidget.__docgenInfo={description:"",methods:[],displayName:"DraggableWidget"},function(S){S.Container=emotion_styled_browser_esm.Z.div``}(DropzoneLogicWidget_S||(DropzoneLogicWidget_S={}));const DropzoneLogicWidget=props=>{const[enter,setEnter]=(0,react.useState)(!1),ref=(0,react.useRef)();return useDroppableModel({onDrop:model=>{props.onDrop(model)},engine:props.engine,forwardRef:ref}),useMouseDragEvents({forwardRef:ref,mouseEnter:()=>{setEnter(!0)},mouseExit:()=>{setEnter(!1)}}),(0,react.useEffect)((()=>{props.onDragEnter(enter)}),[enter]),(0,jsx_runtime.jsx)(DropzoneLogicWidget_S.Container,{ref,className:props.className,children:props.children})};DropzoneLogicWidget.displayName="DropzoneLogicWidget",DropzoneLogicWidget.__docgenInfo={description:"",methods:[],displayName:"DropzoneLogicWidget"};class Layer extends BaseObserver{constructor(options){super(),this.options=options,this.id=(0,v4.Z)(),this.layerManager=null}setLayerManager(manager){this.layerManager=manager}isInserted(){return!!this.layerManager}remove(){this.iterateListeners((cb=>{var _a;return null===(_a=cb.removed)||void 0===_a?void 0:_a.call(cb)}))}moveToTop(){this.iterateListeners((cb=>{var _a;return null===(_a=cb.moveToTop)||void 0===_a?void 0:_a.call(cb)}))}repaint(){this.iterateListeners((cb=>{var _a;return null===(_a=cb.repaint)||void 0===_a?void 0:_a.call(cb)}))}}class LayerManager extends BaseObserver{constructor(){super(),this._layers=new Set,this.initialZIndex=1}setInitialZIndex(index){if(index<1)throw new Error("Index must be > 0");this.initialZIndex=index,this.fireUpdated()}get layers(){return Array.from(this._layers.values())}fireUpdated(){this.iterateListeners((cb=>{var _a;return null===(_a=cb.layersChanged)||void 0===_a?void 0:_a.call(cb)}))}addLayer(layer){layer.setLayerManager(this),this._layers.add(layer);const l=layer.registerListener({removed:()=>{this._layers.delete(layer),layer.setLayerManager(null),l(),this.fireUpdated()},moveToTop:()=>{this._layers.delete(layer),this._layers.add(layer),this.fireUpdated()}});this.iterateListeners((cb=>{var _a;return null===(_a=cb.layerAdded)||void 0===_a?void 0:_a.call(cb)})),this.fireUpdated()}}const OrderingLayerWidgetDivider=props=>{const ref=(0,react.useRef)();return useMouseDragEvents({forwardRef:ref,mouseEnter:()=>{props.layer.zoneEntered(props.index)},mouseExit:()=>{props.layer.zoneEntered(null)}}),useDroppableModel({engine:props.engine,forwardRef:ref,onDrop:model=>{props.layer.dropped(model,props.index)}}),(0,jsx_runtime.jsx)(DimensionTrackingWidget,{dimension:props.dimension,children:(0,jsx_runtime.jsx)(OrderingLayerWidget_S.Container,{ref})})};OrderingLayerWidgetDivider.displayName="OrderingLayerWidgetDivider";const OrderingLayerWidget=props=>(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:props.layer.trackers.map(((c,index)=>(0,jsx_runtime.jsx)(OrderingLayerWidgetDivider,{engine:props.engine,index,dimension:c,layer:props.layer},c.id)))});var OrderingLayerWidget_S;!function(S){S.Container=emotion_styled_browser_esm.Z.div`
    position: absolute;
    top: -5px;
    bottom: -5px;
    left: -5px;
    right: -5px;
    //background: mediumpurple;
    pointer-events: all;
  `}(OrderingLayerWidget_S||(OrderingLayerWidget_S={})),OrderingLayerWidgetDivider.__docgenInfo={description:"",methods:[],displayName:"OrderingLayerWidgetDivider"},OrderingLayerWidget.__docgenInfo={description:"",methods:[],displayName:"OrderingLayerWidget"};class OrderingLayer extends Layer{constructor(options2){super({mouseEvents:!1}),this.options2=options2}get trackers(){return this.options2.trackers}zoneEntered(number){this.iterateListeners((cb=>{var _a;return null===(_a=cb.enteredZone)||void 0===_a?void 0:_a.call(cb,number)}))}dropped(model,index){this.iterateListeners((cb=>{var _a;return null===(_a=cb.dropped)||void 0===_a?void 0:_a.call(cb,model,index)}))}renderLayer(event){return(0,jsx_runtime.jsx)(OrderingLayerWidget,{engine:event.engine,layer:this})}}const OrderingWidgetZone=props=>{const[expand,setExpand]=(0,react.useState)(!1),ref=(0,react.useRef)();return useResizeObserver({forwardRef:ref,dimension:props.container,ignoreDebounce:!0,engine:props.engine}),(0,react.useEffect)((()=>props.layer.registerListener({enteredZone:zone=>{props.container.invalidate(),expand||zone!==props.index?setExpand(!1):setExpand(!0)}})),[]),(0,react.useEffect)((()=>{const animationEnd=()=>{props.layer.trackers.forEach((t=>{t.invalidate()}))};return ref.current.addEventListener("transitionend",animationEnd),()=>{var _a;null===(_a=ref.current)||void 0===_a||_a.removeEventListener("transitionend",animationEnd)}}),[]),props.vertical?(0,jsx_runtime.jsx)(OrderingWidget_S.ExpandVertical,{ref,expand}):(0,jsx_runtime.jsx)(OrderingWidget_S.ExpandHorizontal,{ref,expand})};OrderingWidgetZone.displayName="OrderingWidgetZone";const OrderingWidget=props=>{const[containers]=(0,react.useState)((()=>props.children.map((c=>new DimensionContainer)).concat(new DimensionContainer))),[layer]=(0,react.useState)((()=>new OrderingLayer({trackers:containers})));return(0,react.useEffect)((()=>{const l1=layer.registerListener({dropped:(model,index)=>{props.dropped({index,model})}});return props.engine.layerManager.addLayer(layer),()=>{l1(),layer.remove()}}),[]),(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(OrderingWidgetZone,{engine:props.engine,container:containers[0],layer,vertical:props.vertical,index:0}),props.children.map(((c,index)=>{var _a;return(0,jsx_runtime.jsxs)(react.Fragment,{children:[c,containers[index+1]?(0,jsx_runtime.jsx)(OrderingWidgetZone,{engine:props.engine,container:containers[index+1],layer,vertical:props.vertical,index:index+1}):null]},(null===(_a=containers[index+1])||void 0===_a?void 0:_a.id)||`${index}`)}))]})},SmartOrderingWidget=props=>{const[dragging,setDragging]=(0,react.useState)(!1);return(0,react.useEffect)((()=>props.engine.registerListener({modelDragStart:()=>{setDragging(!0)},modelDragEnd:()=>{setDragging(!1)}})),[]),(0,jsx_runtime.jsx)(OrderingWidget_S.Container,{className:props.className,ref:props.forwardRef,children:dragging?(0,jsx_runtime.jsx)(OrderingWidget,{...props,dropped:event=>{var _a;null===(_a=props.dropped)||void 0===_a||_a.call(props,event)}}):props.children})};var OrderingWidget_S;SmartOrderingWidget.displayName="SmartOrderingWidget",function(S){S.Container=emotion_styled_browser_esm.Z.div``,S.ExpandHorizontal=emotion_styled_browser_esm.Z.div`
    width: ${p=>p.expand?40:0}px;
    height: 100%;
    transition: width 0.3s;
    flex-shrink: 0;
  `,S.ExpandVertical=emotion_styled_browser_esm.Z.div`
    height: ${p=>p.expand?40:0}px;
    width: 100%;
    transition: height 0.3s;
    flex-shrink: 0;
  `}(OrderingWidget_S||(OrderingWidget_S={})),OrderingWidgetZone.__docgenInfo={description:"",methods:[],displayName:"OrderingWidgetZone"},OrderingWidget.__docgenInfo={description:"",methods:[],displayName:"OrderingWidget"},SmartOrderingWidget.__docgenInfo={description:"",methods:[],displayName:"SmartOrderingWidget"};class ResizeDimensionContainer extends DimensionContainer{constructor(){super(),this.hover=!1,this.active=!1}setHover(hover){this.hover!==hover&&(this.hover=hover,this.iterateListeners((cb=>{var _a;return null===(_a=cb.hoverChanged)||void 0===_a?void 0:_a.call(cb)})))}setActive(active){this.active!==active&&(this.active=active,this.iterateListeners((cb=>{var _a;return null===(_a=cb.activeChanged)||void 0===_a?void 0:_a.call(cb)})))}}class WorkspaceNodeModel extends WorkspaceCollectionModel{constructor(type=WorkspaceNodeModel.NAME){super(type),this.vertical=!0,this.r_divisions=[],this.r_overConstrained=!1}normalize(){super.normalize(),this.parent&&this.parent instanceof WorkspaceCollectionModel&&1===this.children.length&&this.parent.replaceModel(this,this.children[0])}setOverConstrained(overConstrainedChanged){this.r_overConstrained!==overConstrainedChanged&&(this.r_overConstrained=overConstrainedChanged,this.iterateListeners((cb=>{var _a;return null===(_a=cb.overConstrainedChanged)||void 0===_a?void 0:_a.call(cb)})))}toArray(){return Object.assign(Object.assign({},super.toArray()),{vertical:this.vertical})}fromArray(payload,engine){super.fromArray(payload,engine),this.vertical=payload.vertical}getResizeDivisions(){let divs=[];for(let i=1;i<this.r_divisions.length-1;i++){if(this.vertical){if(this.children[i-1].expandVertical&&this.children[i].expandVertical)continue}else if(this.children[i-1].expandHorizontal&&this.children[i].expandHorizontal)continue;divs.push({before:this.children[i-1],after:this.children[i],dimensions:this.r_divisions[i],vertical:!this.vertical})}return divs}getPanelDirective(child){return{expand:this.vertical?child.expandVertical:child.expandHorizontal,size:this.vertical?child.size.height:child.size.width}}getAllRenderDimensions(){return super.getAllRenderDimensions().concat(Array.from(this.r_divisions.values()))}recomputeDivisions(){this.r_divisions=this.children.map((c=>new ResizeDimensionContainer)).concat(new ResizeDimensionContainer),this.iterateListeners((cb=>{var _a;return null===(_a=cb.divisionsRecomputed)||void 0===_a?void 0:_a.call(cb)}))}addModel(model,position=null){return super.addModel(model,position),this.recomputeDivisions(),this}removeModel(model){return super.removeModel(model),this.recomputeDivisions(),this}shouldExpand(){return this.vertical?this.expandHorizontal:this.expandVertical}setVertical(vertical=!0){return this.vertical=vertical,this}setHorizontal(horizontal=!0){return this.vertical=!horizontal,this}getChildSibling(model,alignment){return this.vertical&&alignment===Alignment.TOP?this.getModelBefore(model):this.vertical&&alignment===Alignment.BOTTOM?this.getModelAfter(model):this.vertical||alignment!==Alignment.LEFT?this.vertical||alignment!==Alignment.RIGHT?null:this.getModelAfter(model):this.getModelBefore(model)}}WorkspaceNodeModel.NAME="srw-node";class DebugLayer extends Layer{constructor(debugOptions={panels:!0}){super({mouseEvents:!1}),this.debugOptions=debugOptions;const l2=this.registerListener({removed:()=>{this.l1(),l2()}})}setLayerManager(manager){super.setLayerManager(manager),this.l1=this.layerManager.registerListener({layerAdded:()=>{lodash.defer((()=>{this.moveToTop()}))}})}updateOptions(options){this.debugOptions=Object.assign(Object.assign({},this.debugOptions),options),this.repaint()}renderLayer(event){return(0,jsx_runtime.jsx)(DebugLayerWidget,{options:this.debugOptions,engine:event.engine,model:event.model})}}const DebugPanel=props=>{const forceUpdate=useForceUpdate();return(0,react.useEffect)((()=>props.model.registerListener({visibilityChanged:()=>{forceUpdate()}})),[]),props.model.r_visible?(0,jsx_runtime.jsx)(DebugLayer_S.Outline2,{dimension:props.model.r_dimensions,children:(0,jsx_runtime.jsx)(DebugLayer_S.DebugID,{children:props.model.id.substring(0,7)})}):null};DebugPanel.displayName="DebugPanel";const DebugLayerWidget=props=>{var _a,_b,_c;const forceUpdate=useForceUpdate(!0);return(0,react.useEffect)((()=>{props.model.registerListener({layoutInvalidated:()=>{forceUpdate()},dimensionsInvalidated:()=>{forceUpdate()}})}),[]),(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(null===(_a=props.options)||void 0===_a?void 0:_a.panels)?props.model.flatten().filter((p=>!(p instanceof WorkspaceCollectionModel))).map((m=>(0,jsx_runtime.jsx)(DebugPanel,{model:m},m.id))):[],(null===(_b=props.options)||void 0===_b?void 0:_b.dividers)?props.model.flatten().filter((p=>p instanceof WorkspaceNodeModel)).flatMap((m=>m.r_divisions)).map((m=>(0,jsx_runtime.jsx)(DebugLayer_S.Outline,{dimension:m},m.id))):[],(null===(_c=props.options)||void 0===_c?void 0:_c.resizeDividers)?props.model.flatten().filter((p=>p instanceof WorkspaceNodeModel)).flatMap((m=>m.getResizeDivisions())).map((m=>(0,jsx_runtime.jsx)(DebugLayer_S.Outline,{dimension:m.dimensions},m.dimensions.id))):[]]})};var DebugLayer_S;!function(S){S.Outline=(0,emotion_styled_browser_esm.Z)(DimensionTrackingWidget)`
    box-sizing: border-box;
    border: dashed red 1px;
  `,S.Outline2=(0,emotion_styled_browser_esm.Z)(DimensionTrackingWidget)`
    box-sizing: border-box;
    border: solid cyan 1px;
  `,S.DebugID=emotion_styled_browser_esm.Z.div`
    background: cyan;
    color: black;
    font-size: 10px;
    padding: 2px;
    display: inline-block;
    top: 0;
    right: 0;
    position: absolute;
  `}(DebugLayer_S||(DebugLayer_S={})),DebugPanel.__docgenInfo={description:"",methods:[],displayName:"DebugPanel"},DebugLayerWidget.__docgenInfo={description:"",methods:[],displayName:"DebugLayerWidget"};const LayerWidget=props=>{const forceUpdate=useForceUpdate();return(0,react.useEffect)((()=>props.layer.registerListener({repaint:()=>{forceUpdate()}})),[]),(0,jsx_runtime.jsx)(LayerManagerWidget_S.Layer,{$pointerEvents:props.layer.options.mouseEvents,index:props.index,children:props.layer.renderLayer({engine:props.engine,model:props.model})})};LayerWidget.displayName="LayerWidget";const LayerManagerWidget=props=>{const forceUpdate=useForceUpdate();return(0,react.useEffect)((()=>props.layerManager.registerListener({layersChanged:()=>{forceUpdate()}})),[]),(0,jsx_runtime.jsx)(LayerManagerWidget_S.Container,{className:props.className,children:props.layerManager.layers.map(((l,index)=>(0,react.createElement)(LayerWidget,{...props,layer:l,index:index+props.layerManager.initialZIndex,key:l.id})))})};var LayerManagerWidget_S,DirectionalChildWidget_S;LayerManagerWidget.displayName="LayerManagerWidget",function(S){S.Container=emotion_styled_browser_esm.Z.div`
    position: absolute;
    pointer-events: none;
  `,S.Layer=emotion_styled_browser_esm.Z.div`
    z-index: ${p=>p.index};
    pointer-events: ${p=>p.$pointerEvents?"all":"none"};
    width: 100%;
    height: 100%;
    position: absolute;
  `}(LayerManagerWidget_S||(LayerManagerWidget_S={})),LayerWidget.__docgenInfo={description:"",methods:[],displayName:"LayerWidget"},LayerManagerWidget.__docgenInfo={description:"",methods:[],displayName:"LayerManagerWidget"},function(S){S.ChildContainer=emotion_styled_browser_esm.Z.div`
    ${p=>p.width?`min-width: ${p.width}px; width: ${p.width}px`:""};
    ${p=>p.height?`min-height: ${p.height}px; height: ${p.height}px`:""};
    flex-shrink: ${p=>p.expand?1:0};
    flex-grow: ${p=>p.expand?1:0};
  `}(DirectionalChildWidget_S||(DirectionalChildWidget_S={}));const DirectionChildWidget=props=>{let width=null,height=null,expand=props.directive.expand;!expand&&props.vertical?height=props.model.size.height:expand||(width=props.model.size.width);const forceUpdate=useForceUpdate();return(0,react.useEffect)((()=>{const l1=props.model.size.registerListener({updated:()=>{forceUpdate()}});return()=>{l1()}}),[]),(0,jsx_runtime.jsx)(DirectionalChildWidget_S.ChildContainer,{expand,width,height,children:props.generateElement(props.model)})};var DirectionalLayoutWidget_S;DirectionChildWidget.displayName="DirectionChildWidget",DirectionChildWidget.__docgenInfo={description:"",methods:[],displayName:"DirectionChildWidget"},function(S){S.Container=emotion_styled_browser_esm.Z.div`
    display: flex;
    flex-grow: 1;
    flex-direction: ${p=>p.vertical?"column":"row"};
    max-height: 100%;
  `}(DirectionalLayoutWidget_S||(DirectionalLayoutWidget_S={}));const DirectionalLayoutWidget=props=>{const firstDivider=props.dimensionContainerForDivider(0),generateDivider=(0,react.useCallback)((dimension=>props.generateDivider?props.generateDivider(dimension):(0,jsx_runtime.jsx)(DividerWidget,{activeColor:"transparent",hoverColor:"transparent",engine:props.engine,dimensionContainer:dimension})),[]);return(0,jsx_runtime.jsxs)(DirectionalLayoutWidget_S.Container,{ref:props.forwardRef,className:props.className,vertical:props.vertical,children:[(0,jsx_runtime.jsx)(react.Fragment,{children:generateDivider(firstDivider)},firstDivider.id),lodash.map(props.data,((model,index)=>{const dimension=props.dimensionContainerForDivider(index+1);return(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(DirectionChildWidget,{...props,directive:props.getChildSizeDirective(model),model}),(0,jsx_runtime.jsx)(react.Fragment,{children:generateDivider(dimension)},dimension.id)]},model.id)}))]})};var WorkspaceWidget_S;DirectionalLayoutWidget.displayName="DirectionalLayoutWidget",DirectionalLayoutWidget.__docgenInfo={description:"",methods:[],displayName:"DirectionalLayoutWidget"},function(S){S.Container=emotion_styled_browser_esm.Z.div`
    display: flex;
    height: 100%;
    position: relative;
  `,S.LayerManager=(0,emotion_styled_browser_esm.Z)(LayerManagerWidget)`
    width: 100%;
    height: 100%;
  `}(WorkspaceWidget_S||(WorkspaceWidget_S={}));const WorkspaceWidget=props=>{const ref_container=(0,react.useRef)(),timerListener=(0,react.useRef)(null),forceUpdate=useForceUpdate();return(0,react.useEffect)((()=>{props.engine.fireRepainted()})),(0,react.useEffect)((()=>{props.engine.setRootModel(props.model)}),[props.model]),useBaseResizeObserver({forwardRef:ref_container,dimension:props.engine.workspaceContainer}),(0,react.useEffect)((()=>{props.engine.registerListener({layoutInvalidated:()=>{forceUpdate()},repaint:()=>{forceUpdate()}})}),[]),useDragOverModel({forwardRef:ref_container,accept:!1,dragOver:({modelID})=>{timerListener.current&&(clearTimeout(timerListener.current),timerListener.current=null),timerListener.current=setTimeout((()=>{props.engine.setDraggingNode(null)}),200),props.engine.draggingID||props.engine.setDraggingNode(modelID)}}),(0,jsx_runtime.jsx)(UseMouseDragEventsRootWidget,{forwardRef:ref_container,children:(0,jsx_runtime.jsxs)(WorkspaceWidget_S.Container,{ref:ref_container,children:[props.engine.getFactory(props.model.getRootModel()).generateContent({engine:props.engine,model:props.model.getRootModel()}),(0,jsx_runtime.jsx)(WorkspaceWidget_S.LayerManager,{engine:props.engine,layerManager:props.engine.layerManager,model:props.model.getRootModel()})]})})};WorkspaceWidget.displayName="WorkspaceWidget",WorkspaceWidget.__docgenInfo={description:"",methods:[],displayName:"WorkspaceWidget"};class WorkspaceModelFactory extends BaseObserver{constructor(type){super(),this.type=type}setEngine(engine){this.engine=engine}generateModel(){const model=this._generateModel();return this.iterateListeners((cb=>{var _a;return null===(_a=cb.modelGenerated)||void 0===_a?void 0:_a.call(cb,{model})})),model}}class WorkspaceEngineError extends Error{constructor(m){super(m),Object.setPrototypeOf(this,WorkspaceEngineError.prototype)}}class WorkspaceEngine extends BaseObserver{constructor(){super(),this.invalidateDimensionsDebounced=lodash.debounce((()=>{this.invalidateDimensions()}),200),this.locked=!1,this.factories={},this.listeners={},this.draggingID=null,this.layerManager=new LayerManager,this.workspaceContainer=new DimensionContainer,this.rootModel=null}setRootModel(model){var _a;null===(_a=this.rootModelListener)||void 0===_a||_a.call(this),this.rootModelListener=model.registerListener({layoutInvalidated:()=>{this.invalidateLayout()},dimensionsInvalidated:()=>{this.invalidateDimensionsDebounced()}}),this.rootModel=model,this.iterateListeners((cb=>{var _a;return null===(_a=cb.modelUpdated)||void 0===_a?void 0:_a.call(cb)})),this.iterateListeners((cb=>{var _a;return null===(_a=cb.layoutInvalidated)||void 0===_a?void 0:_a.call(cb)}))}fireRepainted(){this.iterateListeners((cb=>{var _a;return null===(_a=cb.layoutRepainted)||void 0===_a?void 0:_a.call(cb)}))}invalidateLayout(){this.iterateListeners((cb=>{var _a;return null===(_a=cb.layoutInvalidated)||void 0===_a?void 0:_a.call(cb)}))}invalidateDimensions(){this.rootModel.flatten().flatMap((m=>m.getAllRenderDimensions())).forEach((d=>{d.invalidate()})),this.iterateListeners((cb=>{var _a;return null===(_a=cb.dimensionsInvalidated)||void 0===_a?void 0:_a.call(cb)}))}setLocked(locked=!0){this.locked!==locked&&(this.locked=locked,this.iterateListeners((cb=>{var _a;return null===(_a=cb.lockUpdated)||void 0===_a?void 0:_a.call(cb)})))}static namespaceMime(data){return`srw/${data}`}fireRepaintListeners(){this.repainting=!0,this.iterateListeners((list=>{var _a;null===(_a=list.repaint)||void 0===_a||_a.call(list)}))}normalize(){this.rootModel.flatten().filter((m=>m instanceof WorkspaceCollectionModel)).forEach((m=>m.normalize()))}registerFactory(factory){this.factories[factory.type]=factory,factory.setEngine(this)}getFactory(model){if("string"!=typeof model&&(model=model.type),!this.factories[model])throw new WorkspaceEngineError("Cannot find Workspace factory for model with type: ["+model+"]");return this.factories[model]}setDraggingNode(id){this.draggingID!==id?(this.draggingID=id,this.iterateListeners((cb=>{var _a;return null===(_a=cb.modelDragStart)||void 0===_a?void 0:_a.call(cb)}))):null===id&&this.iterateListeners((cb=>{var _a;return null===(_a=cb.modelDragEnd)||void 0===_a?void 0:_a.call(cb)}))}}class ExpandNodeModel extends WorkspaceNodeModel{constructor(){super(),this.dimensions=new Map,this.rendered=new Set,this.queuedForInitialSizeCheck=new Set,this.allowSizeRecomputation=!0}recomputeInitialSizes(){this.rendered.clear(),this.children.forEach((model=>{if(this.queuedForInitialSizeCheck.has(model))return;this.queuedForInitialSizeCheck.add(model);const l1=model.r_dimensions.registerListener({updated:()=>{l1(),this.queuedForInitialSizeCheck.delete(model),this.rendered.add(model),0===this.queuedForInitialSizeCheck.size&&(this.recomputeSizes(),this.invalidateLayout())}})})),this.invalidateLayout()}fromArray(payload,engine){this.allowSizeRecomputation=!1,super.fromArray(payload,engine),this.allowSizeRecomputation=!0}addModel(model,position=null){if(super.addModel(model,position),this.vertical&&model.expandVertical||!this.vertical&&model.expandHorizontal){this.dimensions.set(model,{originalWidth:model.size.width,originalHeight:model.size.height});const l2=model.registerListener({removed:()=>{null==l2||l2(),model.setSize({width:this.dimensions.get(model).originalWidth,height:this.dimensions.get(model).originalHeight}),this.dimensions.delete(model)}})}else(this.vertical&&!model.expandVertical||!this.vertical&&!model.expandHorizontal)&&this.allowSizeRecomputation&&model.setSize({width:0,height:0});return this.recomputeInitialSizes(),this}recomputeSizes(){const dims=Array.from(this.dimensions.keys());for(let i=0;i<dims.length-1;i++)this.vertical?dims[i].setHeight(dims[i].r_dimensions.size.height):dims[i].setWidth(dims[i].r_dimensions.size.width)}getResizeDivisions(){let divs=[];for(let i=1;i<this.r_divisions.length-1;i++)divs.push({before:this.children[i-1],after:this.children[i],dimensions:this.r_divisions[i],vertical:!this.vertical});return divs}getPanelDirective(child){return 0===this.dimensions.size&&this.children.indexOf(child)===this.children.length-1?Object.assign(Object.assign({},super.getPanelDirective(child)),{expand:!0}):this.dimensions.size>1&&Array.from(this.dimensions.keys()).indexOf(child)<this.dimensions.size-1&&this.rendered.has(child)?Object.assign(Object.assign({},super.getPanelDirective(child)),{expand:!1}):super.getPanelDirective(child)}}class SubComponentModelFactory extends WorkspaceModelFactory{constructor(type){super(type),this.renderers=new Set}addRenderer(r){this.renderers.add(r)}getRendererForModel(model){for(let r of this.renderers.values())if(r.matchModel(model))return r}}const WorkspaceNodeWidget=props=>{const ref=useModelElement({engine:props.engine,model:props.model});return(0,react.useEffect)((()=>props.model.r_dimensions.registerListener({updated:()=>{props.model.vertical?props.model.setOverConstrained(ref.current.scrollHeight>props.model.r_dimensions.size.height):props.model.setOverConstrained(ref.current.scrollWidth>props.model.r_dimensions.size.width)}})),[]),(0,jsx_runtime.jsx)(WorkspaceNodeWidget_S.DirectionalLayout,{forwardRef:ref,dimensionContainerForDivider:index=>props.model.r_divisions[index],getChildSizeDirective:model=>props.model.getPanelDirective(model),className:props.className,data:props.model.children,generateDivider:props.generateDivider,generateElement:m=>(0,jsx_runtime.jsx)(WorkspaceNodePanelWidget,{model:m,renderer:props.factory.getRendererForModel(m),engine:props.engine}),vertical:props.model.vertical,engine:props.engine})};WorkspaceNodeWidget.displayName="WorkspaceNodeWidget";const WorkspaceNodePanelWidget=props=>{const factory=props.engine.getFactory(props.model),ref=useModelElement({model:props.model,engine:props.engine});return(0,jsx_runtime.jsxs)(WorkspaceNodeWidget_S.Container,{ref,children:[props.renderer?(0,jsx_runtime.jsx)(DraggableWidget_DraggableWidget,{model:props.model,engine:props.engine,children:props.renderer.renderTitleBar({engine:props.engine,model:props.model})}):null,(0,jsx_runtime.jsx)(WorkspaceNodeWidget_S.Content,{children:factory.generateContent({model:props.model,engine:props.engine})})]})};var WorkspaceNodeWidget_S;WorkspaceNodePanelWidget.displayName="WorkspaceNodePanelWidget",function(S){S.DirectionalLayout=(0,emotion_styled_browser_esm.Z)(DirectionalLayoutWidget)`
    height: 100%;
    width: 100%;
  `,S.Container=emotion_styled_browser_esm.Z.div`
    display: flex;
    flex-direction: column;
    position: relative;
    max-height: 100%;
    height: 100%;
    width: 100%;
    overflow: hidden;
  `,S.Content=emotion_styled_browser_esm.Z.div`
    flex-grow: 1;
    display: flex;
    max-height: 100%;
    overflow: hidden;
  `}(WorkspaceNodeWidget_S||(WorkspaceNodeWidget_S={})),WorkspaceNodeWidget.__docgenInfo={description:"",methods:[],displayName:"WorkspaceNodeWidget"},WorkspaceNodePanelWidget.__docgenInfo={description:"",methods:[],displayName:"WorkspaceNodePanelWidget"};class WorkspaceNodeFactory extends SubComponentModelFactory{constructor(type=WorkspaceNodeModel.NAME){super(type)}generateContent(event){return(0,jsx_runtime.jsx)(WorkspaceNodeWidget,{model:event.model,engine:event.engine,factory:this})}_generateModel(){return new WorkspaceNodeModel}}},"../packages/defaults/dist/index.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{n8:()=>DefaultSubComponentRenderer,f8:()=>DefaultTrayFactory,eJ:()=>DefaultWindowModel,jO:()=>DefaultWindowModelFactory,Tm:()=>DefaultWorkspacePanelFactory,lO:()=>DefaultWorkspacePanelModel});var S,fontawesome_svg_core=__webpack_require__("../node_modules/.pnpm/@fortawesome+fontawesome-svg-core@6.4.0/node_modules/@fortawesome/fontawesome-svg-core/index.mjs"),free_solid_svg_icons=__webpack_require__("../node_modules/.pnpm/@fortawesome+free-solid-svg-icons@6.4.0/node_modules/@fortawesome/free-solid-svg-icons/index.mjs"),react=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),emotion_styled_browser_esm=__webpack_require__("../node_modules/.pnpm/@emotion+styled@11.11.0_@emotion+react@11.11.1_@types+react@18.2.14_react@18.2.0/node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"),dist=__webpack_require__("../packages/model-tray/dist/index.jsx"),jsx_runtime=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");!function(S){S.Tray=emotion_styled_browser_esm.Z.div`
    height: 15px;
    background: mediumpurple;
  `}(S||(S={}));class DefaultTrayFactory extends dist.Fj{generateTrayHeader(event){return(0,jsx_runtime.jsx)(S.Tray,{onDoubleClick:()=>{event.model.setMode(event.model.mode===dist.Nv.NORMAL?dist.Nv.COLLAPSED:dist.Nv.NORMAL)}})}}var core_dist=__webpack_require__("../packages/core/dist/index.jsx");class DefaultWorkspacePanelModel extends core_dist.uU{constructor(displayName,icon="cube"){super("default"),this.displayName=displayName,this.icon=icon,this.setExpand(!1,!0)}toArray(){return Object.assign(Object.assign({},super.toArray()),{displayName:this.displayName,icon:this.icon})}fromArray(payload,engine){super.fromArray(payload,engine),this.displayName=payload.displayName,this.icon=payload.icon}}const Meta=props=>(0,jsx_runtime.jsxs)(DefaultPanelContentWidget_S.Meta,{children:[(0,jsx_runtime.jsx)(DefaultPanelContentWidget_S.MetaKey,{children:props.label}),(0,jsx_runtime.jsx)(DefaultPanelContentWidget_S.MetaValue,{children:props.value})]});Meta.displayName="Meta";const DefaultPanelContentWidget=props=>{const ref=(0,react.useRef)();return(0,react.useEffect)((()=>{ref.current.style.opacity="1";const res=setTimeout((()=>{ref.current.style.opacity="0"}),1e3);return()=>{clearTimeout(res)}})),(0,jsx_runtime.jsxs)(DefaultPanelContentWidget_S.Container,{children:[(0,jsx_runtime.jsx)(Meta,{label:"Title",value:props.model.displayName}),(0,jsx_runtime.jsx)(Meta,{label:"ID",value:props.model.id.substring(0,7)}),(0,jsx_runtime.jsx)(Meta,{label:"Expand horizontal",value:props.model.expandHorizontal?"true":"false"}),(0,jsx_runtime.jsx)(Meta,{label:"Expand vertical",value:props.model.expandVertical?"true":"false"}),(0,jsx_runtime.jsx)(DefaultPanelContentWidget_S.Rendering,{ref,children:"rendering"})]})};var DefaultPanelContentWidget_S;DefaultPanelContentWidget.displayName="DefaultPanelContentWidget",function(S){S.Container=emotion_styled_browser_esm.Z.div`
    background: rgba(0, 0, 0, 0.3);
    padding: 10px;
    color: rgba(255, 255, 255, 0.4);
    font-size: 13px;
    flex-grow: 1;
  `,S.Meta=emotion_styled_browser_esm.Z.div`
    display: flex;
    align-items: center;
    font-size: 11px;
  `,S.Rendering=emotion_styled_browser_esm.Z.div`
    background: rgb(72, 41, 41);
    color: white;
    border-radius: 5px;
    font-size: 11px;
    padding: 2px 5px;
    display: inline-block;
  `,S.MetaKey=emotion_styled_browser_esm.Z.div``,S.MetaValue=emotion_styled_browser_esm.Z.div`
    font-weight: bold;
    padding-left: 5px;
  `}(DefaultPanelContentWidget_S||(DefaultPanelContentWidget_S={})),Meta.__docgenInfo={description:"",methods:[],displayName:"Meta"},DefaultPanelContentWidget.__docgenInfo={description:"",methods:[],displayName:"DefaultPanelContentWidget"};class DefaultWorkspacePanelFactory extends core_dist.Wg{constructor(){super(DefaultWorkspacePanelFactory.TYPE)}generateContent(event){return(0,jsx_runtime.jsx)(DefaultPanelContentWidget,{model:event.model})}_generateModel(){return new DefaultWorkspacePanelModel("Test")}}DefaultWorkspacePanelFactory.TYPE="default";var model_floating_window_dist=__webpack_require__("../packages/model-floating-window/dist/index.jsx");const DefaultFloatingWindowWidget=props=>(0,jsx_runtime.jsxs)(DefaultFloatingWindowWidget_S.Container,{children:[props.titlebar,props.content]});var DefaultFloatingWindowWidget_S;DefaultFloatingWindowWidget.displayName="DefaultFloatingWindowWidget",function(S){S.Container=emotion_styled_browser_esm.Z.div`
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
    pointer-events: all;
    border: solid 1px rgb(10, 10, 10);
    height: 100%;
    width: 100%;
    display: flex;
    flex-direction: column;
  `}(DefaultFloatingWindowWidget_S||(DefaultFloatingWindowWidget_S={})),DefaultFloatingWindowWidget.__docgenInfo={description:"",methods:[],displayName:"DefaultFloatingWindowWidget"};class DefaultWindowModel extends model_floating_window_dist.yL{constructor(child){super(DefaultWindowModelFactory.TYPE,child),this.setSize({width:200,height:200})}}class DefaultWindowModelFactory extends model_floating_window_dist.pC{constructor(){super(DefaultWindowModelFactory.TYPE)}generateContent(event){return(0,jsx_runtime.jsx)(DefaultFloatingWindowWidget,{...event})}_generateModel(){return new DefaultWindowModel}}DefaultWindowModelFactory.TYPE="floating-window";var DefaultPanelTitleWidget_S,DefaultPanelTabWidget_S,index_es=__webpack_require__("../node_modules/.pnpm/@fortawesome+react-fontawesome@0.2.0_@fortawesome+fontawesome-svg-core@6.4.0_react@18.2.0/node_modules/@fortawesome/react-fontawesome/index.es.js");!function(S){S.Container=emotion_styled_browser_esm.Z.div`
    user-select: none;
    background: rgba(0, 0, 0, 0.5);
    padding: 5px 10px;
    font-size: 13px;
    color: white;
    min-width: 100px;
    display: flex;
    align-items: center;

    &:hover {
      background: black;
    }
  `,S.Title=emotion_styled_browser_esm.Z.div`
    flex-grow: 1;
  `,S.Close=emotion_styled_browser_esm.Z.div`
    opacity: 0.5;
    flex-grow: 0;
    flex-shrink: 0;
    font-size: 14px;
  `}(DefaultPanelTitleWidget_S||(DefaultPanelTitleWidget_S={}));class DefaultPanelTitleWidget extends react.Component{render(){return(0,jsx_runtime.jsxs)(DefaultPanelTitleWidget_S.Container,{children:[(0,jsx_runtime.jsx)(DefaultPanelTitleWidget_S.Title,{children:this.props.title}),(0,jsx_runtime.jsx)(DefaultPanelTitleWidget_S.Close,{onClick:this.props.close,children:(0,jsx_runtime.jsx)(index_es.G,{icon:"times"})})]})}}DefaultPanelTitleWidget.displayName="DefaultPanelTitleWidget",DefaultPanelTitleWidget.__docgenInfo={description:"",methods:[],displayName:"DefaultPanelTitleWidget"},function(S){S.Container=emotion_styled_browser_esm.Z.div`
    user-select: none;
    padding: 5px 10px;
    font-size: 13px;
    color: white;
    min-width: 100px;
    margin-right: 2px;
    margin-top: 2px;
    transform: perspective(4px) rotateX(1deg);
    transform-origin: bottom left;
    background: ${p=>p.selected?"rgb(0,192,255) !important":"rgba(0,0,0, 0.5)"};

    &:hover {
      background: black;
    }
  `}(DefaultPanelTabWidget_S||(DefaultPanelTabWidget_S={}));class DefaultPanelTabWidget extends react.Component{render(){return(0,jsx_runtime.jsx)(DefaultPanelTabWidget_S.Container,{selected:this.props.selected,children:this.props.name})}}DefaultPanelTabWidget.displayName="DefaultPanelTabWidget",DefaultPanelTabWidget.__docgenInfo={description:"",methods:[],displayName:"DefaultPanelTabWidget"};var DefaultPanelMicroButtonWidget_S,emotion_react_browser_esm=__webpack_require__("../node_modules/.pnpm/@emotion+react@11.11.1_@types+react@18.2.14_react@18.2.0/node_modules/@emotion/react/dist/emotion-react.browser.esm.js");!function(S){S.Icon=(0,emotion_styled_browser_esm.Z)(index_es.G,{shouldForwardProp:p=>"$smaller"!==p})`
    font-size: ${p=>p.$smaller?14:20}px;
  `;const selected=emotion_react_browser_esm.iv`
    background-color: rgb(0, 192, 255) !important;
    background-image: linear-gradient(rgba(black, 0), rgba(black, 0.2)) !important;
  `;S.Container=emotion_styled_browser_esm.Z.div`
    min-height: ${p=>p.$smaller?30:45}px;
    ${p=>p.$smaller?"width: 30px":""};
    background-color: black;
    display: flex;
    justify-content: center;
    align-items: center;
    color: white;
    ${p=>p.selected&&selected};
    margin-bottom: 1px;
  `}(DefaultPanelMicroButtonWidget_S||(DefaultPanelMicroButtonWidget_S={}));class DefaultPanelMicroButtonWidget extends react.Component{render(){return(0,jsx_runtime.jsx)(DefaultPanelMicroButtonWidget_S.Container,{$smaller:this.props.smaller,selected:this.props.selected,children:(0,jsx_runtime.jsx)(DefaultPanelMicroButtonWidget_S.Icon,{$smaller:this.props.smaller,icon:this.props.icon})})}}DefaultPanelMicroButtonWidget.displayName="DefaultPanelMicroButtonWidget",DefaultPanelMicroButtonWidget.__docgenInfo={description:"",methods:[],displayName:"DefaultPanelMicroButtonWidget"};class DefaultSubComponentRenderer{renderIcon(event){return(0,jsx_runtime.jsx)(DefaultPanelMicroButtonWidget,{smaller:event.parent.mode===dist.Nv.NORMAL,selected:event.selected,icon:event.model.icon})}renderTitleBar(event){return(0,jsx_runtime.jsx)(DefaultPanelTitleWidget,{title:event.model.displayName,close:()=>{event.model.delete(),event.engine.normalize()}})}renderTab(event){return(0,jsx_runtime.jsx)(DefaultPanelTabWidget,{name:event.model.displayName,selected:event.selected})}matchModel(model){return model.type===DefaultWorkspacePanelFactory.TYPE}renderWindowTitle(event){return(0,jsx_runtime.jsx)(DefaultPanelTitleWidget,{title:event.model.displayName,close:()=>{event.model.parent.delete(),event.engine.normalize()}})}}fontawesome_svg_core.vI.add(free_solid_svg_icons.hGM,free_solid_svg_icons.NBC)},"../packages/model-floating-window/dist/index.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{pC:()=>FloatingWindowFactory,yL:()=>FloatingWindowModel,wN:()=>RootWorkspaceModel});var dist=__webpack_require__("../packages/core/dist/index.jsx"),react=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),emotion_styled_browser_esm=__webpack_require__("../node_modules/.pnpm/@emotion+styled@11.11.0_@emotion+react@11.11.1_@types+react@18.2.14_react@18.2.0/node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"),jsx_runtime=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");const FloatingWindowLayerWidget=props=>{const factory=props.engine.getFactory(props.window.child),forceUpdate=(0,dist.NW)(),ref=(0,react.useRef)(),initialPos=(0,react.useRef)({left:props.window.position.left,top:props.window.position.top});(0,dist.SF)({forwardRef:ref,startMove:()=>{props.window.draggable&&(props.layer.setAnimate(!1),initialPos.current={top:props.window.position.top,left:props.window.position.left})},moved:({distanceX,distanceY})=>{props.window.draggable&&props.window.position.update({left:initialPos.current.left+distanceX,top:initialPos.current.top+distanceY})},endMove:()=>{props.window.draggable&&props.layer.setAnimate(!0)}}),(0,react.useEffect)((()=>props.window.registerListener({draggableUpdated:()=>{forceUpdate()},childUpdated:()=>{forceUpdate()}})),[props.window]),(0,react.useEffect)((()=>props.window.position.registerListener({updated:()=>{props.animate&&setTimeout((()=>{props.window.r_dimensions.invalidate()}),300)}})),[]);const modelRef=(0,dist.KA)({model:props.window,engine:props.engine}),windowFactory=props.engine.getFactory(props.window);return(0,jsx_runtime.jsx)(dist.tv,{forwardRef:modelRef,animateDuration:props.animate?300:0,dimension:props.window.dimension,children:windowFactory.generateContent({content:factory.generateContent({engine:props.engine,model:props.window.child}),titlebar:(0,jsx_runtime.jsx)(S.Title,{ref,children:windowFactory.getRendererForModel(props.window.child).renderWindowTitle({model:props.window.child,engine:props.engine})}),engine:props.engine,model:props.window})})};var S;FloatingWindowLayerWidget.displayName="FloatingWindowLayerWidget",function(S){S.Container=emotion_styled_browser_esm.Z.div`
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
    pointer-events: all;
    border: solid 1px rgb(10, 10, 10);
    height: 100%;
    width: 100%;
    display: flex;
    flex-direction: column;
  `,S.Title=emotion_styled_browser_esm.Z.div`
    cursor: move;
    user-select: none;
    flex-shrink: 0;
  `}(S||(S={})),FloatingWindowLayerWidget.__docgenInfo={description:"",methods:[],displayName:"FloatingWindowLayerWidget"};class FloatingWindowLayer extends dist.mh{constructor(model){super({mouseEvents:!1}),this.model=model,this.animate=!0}setAnimate(animate){this.animate=animate,this.repaint()}renderLayer(event){return(0,jsx_runtime.jsx)(FloatingWindowLayerWidget,{layer:this,animate:this.animate,window:this.model,engine:event.engine})}}const FloatingWindowResizeCornerWidget=props=>{const ref=(0,react.useRef)(),val1=(0,react.useRef)(0),val2=(0,react.useRef)(0),width=(0,react.useRef)(0),height=(0,react.useRef)(0);return(0,dist.SF)({forwardRef:ref,startMove:()=>{props.toggleAnimation(!1),width.current=props.window.size.width,height.current=props.window.size.height,props.corner===dist.Ns.TOP_LEFT?(val1.current=props.window.position.left,val2.current=props.window.position.top):props.corner===dist.Ns.BOTTOM_LEFT?val1.current=props.window.position.left:props.corner===dist.Ns.TOP_RIGHT&&(val2.current=props.window.position.top)},moved:({distanceX,distanceY})=>{props.corner===dist.Ns.TOP_LEFT?props.window.dimension.update({left:val1.current+distanceX,top:val2.current+distanceY,width:width.current+-1*distanceX,height:height.current+-1*distanceY}):props.corner===dist.Ns.BOTTOM_LEFT?props.window.dimension.update({left:val1.current+distanceX,width:width.current+-1*distanceX,height:height.current+distanceY}):props.corner===dist.Ns.BOTTOM_RIGHT?props.window.dimension.update({width:width.current+distanceX,height:height.current+distanceY}):props.window.dimension.update({top:val2.current+distanceY,width:width.current+distanceX,height:height.current+-1*distanceY})},endMove:()=>{props.toggleAnimation(!0)}}),(0,jsx_runtime.jsx)(FloatingWindowResizeCornerWidget_S.CornerResize,{debug:props.debug,ref,corner:props.corner})};var FloatingWindowResizeCornerWidget_S;FloatingWindowResizeCornerWidget.displayName="FloatingWindowResizeCornerWidget",function(S){const CORNER_CSS={[dist.Ns.TOP_LEFT]:["top","left"],[dist.Ns.TOP_RIGHT]:["top","right"],[dist.Ns.BOTTOM_RIGHT]:["bottom","right"],[dist.Ns.BOTTOM_LEFT]:["bottom","left"]};S.CornerResize=emotion_styled_browser_esm.Z.div`
    pointer-events: all;
    cursor: ${p=>p.corner}-resize;
    position: absolute;
    width: ${15}px;
    height: ${15}px;
    ${p=>CORNER_CSS[p.corner].map((c=>`${c}:-7.5px`)).join(";")};
    user-select: none;
    background: ${p=>p.debug?"red":"transparent"};
  `}(FloatingWindowResizeCornerWidget_S||(FloatingWindowResizeCornerWidget_S={})),FloatingWindowResizeCornerWidget.__docgenInfo={description:"",methods:[],displayName:"FloatingWindowResizeCornerWidget"};const FloatingWindowResizeEdgeWidget=props=>{const ref=(0,react.useRef)(),left=(0,react.useRef)(0),top=(0,react.useRef)(0),width=(0,react.useRef)(0),height=(0,react.useRef)(0);return(0,dist.SF)({forwardRef:ref,startMove:()=>{props.toggleAnimation(!1),width.current=props.window.size.width,height.current=props.window.size.height,left.current=props.window.position.left,top.current=props.window.position.top},moved:({distanceX,distanceY})=>{props.alignment===dist.v2.TOP?props.window.dimension.update({top:top.current+distanceY,height:height.current+-1*distanceY}):props.alignment===dist.v2.BOTTOM?props.window.dimension.update({height:height.current+distanceY}):props.alignment===dist.v2.LEFT?props.window.dimension.update({left:left.current+distanceX,width:width.current+-1*distanceX}):props.window.dimension.update({width:width.current+distanceX})},endMove:()=>{props.toggleAnimation(!0)}}),(0,jsx_runtime.jsx)(FloatingWindowResizeEdgeWidget_S.Container,{ref,debug:props.debug,alignment:props.alignment,vertical:props.alignment===dist.v2.LEFT||props.alignment===dist.v2.RIGHT})};var FloatingWindowResizeEdgeWidget_S;FloatingWindowResizeEdgeWidget.displayName="FloatingWindowResizeEdgeWidget",function(S){S.Container=emotion_styled_browser_esm.Z.div`
    pointer-events: all;
    cursor: ${p=>p.vertical?"col-resize":"row-resize"};
    position: absolute;
    ${p=>p.vertical?"height: 100%; width: 6px":"width: 100%; height: 6px"};
    ${p=>p.alignment}: -${2}px;
    user-select: none;
    background: ${p=>p.debug?"cyan":"transparent"};
  `}(FloatingWindowResizeEdgeWidget_S||(FloatingWindowResizeEdgeWidget_S={})),FloatingWindowResizeEdgeWidget.__docgenInfo={description:"",methods:[],displayName:"FloatingWindowResizeEdgeWidget"};const FloatingWindowResizeLayerWidget=props=>(0,jsx_runtime.jsx)(dist.tv,{dimension:props.window.dimension,children:(0,jsx_runtime.jsxs)(FloatingWindowResizeLayerWidget_S.Relative,{children:[(0,jsx_runtime.jsx)(FloatingWindowResizeEdgeWidget,{...props,alignment:dist.v2.LEFT}),(0,jsx_runtime.jsx)(FloatingWindowResizeEdgeWidget,{...props,alignment:dist.v2.TOP}),(0,jsx_runtime.jsx)(FloatingWindowResizeEdgeWidget,{...props,alignment:dist.v2.BOTTOM}),(0,jsx_runtime.jsx)(FloatingWindowResizeEdgeWidget,{...props,alignment:dist.v2.RIGHT}),(0,jsx_runtime.jsx)(FloatingWindowResizeCornerWidget,{...props,corner:dist.Ns.TOP_LEFT}),(0,jsx_runtime.jsx)(FloatingWindowResizeCornerWidget,{...props,corner:dist.Ns.TOP_RIGHT}),(0,jsx_runtime.jsx)(FloatingWindowResizeCornerWidget,{...props,corner:dist.Ns.BOTTOM_RIGHT}),(0,jsx_runtime.jsx)(FloatingWindowResizeCornerWidget,{...props,corner:dist.Ns.BOTTOM_LEFT})]})});var FloatingWindowResizeLayerWidget_S;FloatingWindowResizeLayerWidget.displayName="FloatingWindowResizeLayerWidget",function(S){S.Relative=emotion_styled_browser_esm.Z.div`
    position: relative;
    height: 100%;
    width: 100%;
  `}(FloatingWindowResizeLayerWidget_S||(FloatingWindowResizeLayerWidget_S={})),FloatingWindowResizeLayerWidget.__docgenInfo={description:"",methods:[],displayName:"FloatingWindowResizeLayerWidget"};class FloatingWindowResizeLayer extends dist.mh{constructor(options2){super({mouseEvents:!1}),this.options2=options2}renderLayer(event){return(0,jsx_runtime.jsx)(FloatingWindowResizeLayerWidget,{debug:this.options2.root.debug,window:this.options2.model,toggleAnimation:this.options2.toggleAnimation})}}class RootWorkspaceModel extends dist.Yb{constructor(engine,debug=!1){super(),this.engine=engine,this.debug=debug,this.floatingWindows=new Set,this.layerListener=this.engine.layerManager.registerListener({layerAdded:()=>{this.floatingWindows.forEach((w=>{this.engine.layerManager.layers.filter((l=>l instanceof FloatingWindowLayer)).forEach((l=>{l.moveToTop()}))})),this.floatingWindows.forEach((w=>{this.engine.layerManager.layers.filter((l=>l instanceof FloatingWindowResizeLayer)).forEach((l=>{l.moveToTop()}))}))}})}toArray(){return Object.assign(Object.assign({},super.toArray()),{floatingWindows:Array.from(this.floatingWindows.values()).filter((w=>w.serializeToRoot)).map((c=>c.toArray()))})}fromArray(payload,engine){var _a;super.fromArray(payload,engine),null===(_a=payload.floatingWindows)||void 0===_a||_a.forEach((window=>{const model=engine.getFactory(window.type).generateModel();model.fromArray(window,engine),this.addModel(model)}))}setDebug(debug){this.debug=debug,this.engine.fireRepaintListeners()}flatten(){return super.flatten().concat(Array.from(this.floatingWindows.values()).flatMap((v=>[v,v.child])))}dispose(){this.layerListener()}addFloatingWindow(window){if(this.floatingWindows.has(window))return;this.floatingWindows.add(window);const layer=new FloatingWindowLayer(window),resize=new FloatingWindowResizeLayer({model:window,toggleAnimation:animate=>{layer.setAnimate(animate)},root:this});this.engine.layerManager.addLayer(layer),this.engine.layerManager.addLayer(resize),window.setParent(this),window.registerListener({removed:()=>{layer.remove(),resize.remove(),this.floatingWindows.delete(window)}})}}class FloatingWindowModel extends dist.uU{constructor(type,child){super(type),child&&this.setChild(child),this.draggable=!0,this.serializeToRoot=!0,this.position=new dist.Ly,this.dimension=new dist.lY({position:this.position,size:this.size}),this.position.registerListener({updated:()=>{this.r_dimensions.invalidate(),this.normalizePosition()}})}setDraggable(dragEnable){this.draggable!==dragEnable&&(this.draggable=dragEnable,this.iterateListeners((cb=>{var _a;return null===(_a=cb.draggableUpdated)||void 0===_a?void 0:_a.call(cb)})))}fromArray(payload,engine){super.fromArray(payload,engine),this.dimension.update(payload.dimensions);const model=engine.getFactory(payload.model.type).generateModel();model.fromArray(payload.model,engine),this.setChild(model)}toArray(){return Object.assign(Object.assign({},super.toArray()),{dimensions:this.dimension.dimensions,model:this.child.toArray()})}setParent(parent){var _a;super.setParent(parent),parent?this.parentListener=parent.r_dimensions.registerListener({updated:()=>{this.normalizePosition()}}):null===(_a=this.parentListener)||void 0===_a||_a.call(this)}setChild(child){this.child=child,child.setParent(this),this.invalidateLayout(),this.iterateListeners((cb=>{var _a;return null===(_a=cb.childUpdated)||void 0===_a?void 0:_a.call(cb)}))}normalizePosition(){this.parent&&(this.size.height>this.parent.r_dimensions.size.height||this.size.width>this.parent.r_dimensions.size.width||(this.position.left<this.parent.r_dimensions.position.left&&this.position.update({left:0}),this.position.top<this.parent.r_dimensions.position.top&&this.position.update({top:0}),this.position.left+this.size.width>this.parent.r_dimensions.position.left+this.parent.r_dimensions.size.width&&this.position.update({left:this.parent.r_dimensions.position.left+this.parent.r_dimensions.size.width-this.size.width}),this.position.top+this.size.height>this.parent.r_dimensions.position.top+this.parent.r_dimensions.size.height&&this.position.update({top:this.parent.r_dimensions.position.top+this.parent.r_dimensions.size.height-this.size.height})))}}FloatingWindowModel.TYPE="floating-window";class FloatingWindowFactory extends dist.Rr{constructor(type){super(type)}}FloatingWindowFactory.TYPE="floating-window"},"../packages/model-tabs/dist/index.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{GX:()=>WorkspaceTabFactory,hH:()=>WorkspaceTabModel});var dist=__webpack_require__("../packages/core/dist/index.jsx"),react=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),jsx_runtime=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");const TabButtonWidget=props=>{const forceUpdate=(0,dist.NW)();(0,react.useEffect)((()=>props.model.parent.registerListener({selectionChanged:()=>{forceUpdate()}})),[]);const parent=props.model.parent;return(0,jsx_runtime.jsx)(dist.up,{onClick:()=>{props.model.parent.setSelected(props.model)},engine:props.engine,model:props.model,children:props.factory.renderTabForModel(props.model,props.model.id===parent.getSelected().id,props.engine)})};TabButtonWidget.displayName="TabButtonWidget",TabButtonWidget.__docgenInfo={description:"",methods:[],displayName:"TabButtonWidget"};var S,emotion_styled_browser_esm=__webpack_require__("../node_modules/.pnpm/@emotion+styled@11.11.0_@emotion+react@11.11.1_@types+react@18.2.14_react@18.2.0/node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"),lodash=__webpack_require__("../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/lodash.js");!function(S){S.Container=emotion_styled_browser_esm.Z.div`
    display: flex;
    flex-direction: column;
    position: relative;
    flex-grow: 1;
    height: 100%;
  `,S.Draggable=(0,emotion_styled_browser_esm.Z)(dist.up)`
    display: flex;
    flex-wrap: wrap;
    flex-grow: 0;
    position: relative;
  `,S.Content=emotion_styled_browser_esm.Z.div`
    flex-grow: 1;
    display: flex;
    height: 100%;
  `,S.TabGroup=(0,emotion_styled_browser_esm.Z)(dist.Oy)`
    display: flex;
    overflow-x: auto;
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;

    &::-webkit-scrollbar {
      display: none; /* Safari and Chrome */
    }
  `}(S||(S={}));const TabContent=props=>{let selectedFactory=props.engine.getFactory(props.model);const ref=(0,dist.KA)({model:props.model,engine:props.engine});return(0,jsx_runtime.jsx)(S.Content,{ref,children:selectedFactory.generateContent({model:props.model,engine:props.engine})})};TabContent.displayName="TabContent";const TabGroupWidget=props=>{const forceUpdate=(0,dist.NW)();(0,react.useEffect)((()=>props.model.registerListener({selectionChanged:()=>{forceUpdate()}})),[]);const ref=(0,dist.KA)({model:props.model,engine:props.engine});let selected=props.model.getSelected();return(0,jsx_runtime.jsxs)(S.Container,{ref,children:[(0,jsx_runtime.jsx)(S.Draggable,{engine:props.engine,model:props.model,children:props.factory.generateTabsContainer({engine:props.engine,model:props.model,content:(0,jsx_runtime.jsx)(S.TabGroup,{dropped:({model,index})=>{model.flatten().reverse().filter((m=>!(m instanceof dist.xh))).forEach((m=>{props.model.addModel(m,index)})),props.engine.normalize()},engine:props.engine,vertical:!1,children:lodash.map(props.model.children,(child=>(0,jsx_runtime.jsx)(TabButtonWidget,{factory:props.factory,model:child,engine:props.engine},child.id)))})})}),(0,jsx_runtime.jsx)(TabContent,{model:selected,engine:props.engine},selected.id)]})};TabGroupWidget.displayName="TabGroupWidget",TabContent.__docgenInfo={description:"",methods:[],displayName:"TabContent"},TabGroupWidget.__docgenInfo={description:"",methods:[],displayName:"TabGroupWidget"};class WorkspaceTabModel extends dist.xh{constructor(){super(WorkspaceTabModel.NAME),this.selected=null,this.childListener=null}fromArray(payload,engine){if(super.fromArray(payload,engine),payload.selected&&this.children.find((c=>c.id===payload.selected))){const found=this.children.find((c=>c.id===payload.selected));if(!found)return;this.setSelected(found)}}toArray(){return Object.assign(Object.assign({},super.toArray()),{selected:this.selected})}addModel(model,position=null){return super.addModel(model,position),this.setSelected(model),this}removeModel(model){return super.removeModel(model),this.selected===model.id&&this.children.length>0&&this.setSelected(this.children[0]),this}getSelected(){return lodash.find(this.children,{id:this.selected})}setSelected(model){var _a;return null===(_a=this.childListener)||void 0===_a||_a.call(this),this.selected=model.id,model&&(this.childListener=this.minimumSize.trackSize(model.minimumSize)),this.iterateListeners((cb=>{var _a;return null===(_a=cb.selectionChanged)||void 0===_a?void 0:_a.call(cb)})),this}}WorkspaceTabModel.NAME="tabs";class WorkspaceTabFactory extends dist.Rr{constructor(){super(WorkspaceTabModel.NAME)}_generateModel(){return new WorkspaceTabModel}renderTabForModel(model,selected,engine){const r=this.getRendererForModel(model);return r?r.renderTab({model,selected,engine}):(0,jsx_runtime.jsx)("span",{children:model.type})}generateTabsContainer(event){return(0,jsx_runtime.jsx)(WorkspaceTabFactory_S.TabHeader,{children:event.content})}generateContent(event){return(0,jsx_runtime.jsx)(TabGroupWidget,{factory:this,model:event.model,engine:event.engine},event.model.id)}}var WorkspaceTabFactory_S;!function(S){S.TabHeader=emotion_styled_browser_esm.Z.div`
    min-height: 30px;
  `}(WorkspaceTabFactory_S||(WorkspaceTabFactory_S={}))},"../packages/model-tray/dist/index.jsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Fj:()=>WorkspaceTrayFactory,Nv:()=>WorkspaceTrayMode,AJ:()=>WorkspaceTrayModel});var WorkspaceTrayMode,TrayIconPosition,react=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),dist=__webpack_require__("../packages/core/dist/index.jsx");!function(WorkspaceTrayMode){WorkspaceTrayMode.COLLAPSED="micro",WorkspaceTrayMode.NORMAL="expand"}(WorkspaceTrayMode||(WorkspaceTrayMode={})),function(TrayIconPosition){TrayIconPosition.LEFT="left",TrayIconPosition.RIGHT="right"}(TrayIconPosition||(TrayIconPosition={}));class WorkspaceTrayModel extends dist.xh{constructor(options){super(WorkspaceTrayModel.NAME),this.options=options,this.setExpand(!1,!0),this.selectedModel=null,this.iconBarPosition=TrayIconPosition.LEFT,this.floatingWindow=options.factory.generateModel(),this.floatingWindow.setParent(this),this.floatingWindow.serializeToRoot=!1,this.floatingWindow.registerListener({removed:()=>{this.setSelectedModel(null)},childUpdated:()=>{var _a;this.floatingWindow.minimumSize.update({width:100,height:100}),this.updateWindowPosition(this.floatingWindow.child),null===(_a=this.childListener)||void 0===_a||_a.call(this),this.childListener=this.floatingWindow.child.r_dimensions.registerListener({updated:()=>{this.updateWindowPosition(this.floatingWindow.child)}})}}),this.setMode(WorkspaceTrayMode.NORMAL),this.size.registerListener({updated:()=>{this.mode===WorkspaceTrayMode.NORMAL&&this.r_visible&&this.setExpandedSize(this.size.width)}})}setExpandedSize(size){size>this.options.iconWidth&&size!==this.sizeExpanded&&(this.sizeExpanded=size,this.size.update({width:this.sizeExpanded}))}setIconPosition(position){this.iconBarPosition!==position&&(this.iconBarPosition=position,this.iterateListeners((cb=>{var _a;return null===(_a=cb.iconPositionChanged)||void 0===_a?void 0:_a.call(cb)})))}getSelectedModel(){return this.selectedModel}setSelectedModel(child){this.selectedModel!==child&&(this.selectedModel=child,this.mode===WorkspaceTrayMode.COLLAPSED&&this.setFloatingModel(child),this.iterateListeners((cb=>{var _a;return null===(_a=cb.selectionChanged)||void 0===_a?void 0:_a.call(cb)})))}updateWindowPosition(child){const root=this.getRootModel();this.r_dimensions.getRelativeToPosition(root.r_dimensions.position)[dist.v2.LEFT]<root.r_dimensions.size.width/2?this.floatingWindow.position.update({left:child.r_dimensions.position.left+child.r_dimensions.size.width,top:child.r_dimensions.position.top}):this.floatingWindow.position.update({left:-this.floatingWindow.size.width+child.r_dimensions.position.left,top:child.r_dimensions.position.top})}get expandHorizontal(){return this.mode!==WorkspaceTrayMode.COLLAPSED&&super.expandHorizontal}delete(){var _a;super.delete(),null===(_a=this.childListener)||void 0===_a||_a.call(this)}toArray(){var _a;return Object.assign(Object.assign({},super.toArray()),{mode:this.mode,selected:null===(_a=this.selectedModel)||void 0===_a?void 0:_a.id,iconPosition:this.iconBarPosition,sizeExpanded:this.sizeExpanded})}fromArray(payload,engine){super.fromArray(payload,engine),this.setIconPosition(payload.iconPosition||TrayIconPosition.LEFT),this.sizeExpanded=payload.sizeExpanded,payload.selected&&this.setSelectedModel(this.children.find((m=>m.id===payload.selected))||null),this.setMode(payload.mode||WorkspaceTrayMode.NORMAL)}addModel(model,position=null){return super.addModel(model,position),this.normalizeSelectedModel(),this}removeModel(model){return super.removeModel(model),this.selectedModel&&this.selectedModel===model&&(this.selectedModel=null),this.normalizeSelectedModel(),this}normalizeSelectedModel(){this.mode===WorkspaceTrayMode.NORMAL&&null==this.selectedModel&&this.children[0]&&(this.setSelectedModel(this.children[0]),this.sizeExpanded||this.setExpandedSize(this.children[0].size.width||this.children[0].minimumSize.width))}setMode(mode){return this.mode=mode,this.mode===WorkspaceTrayMode.COLLAPSED?(this.setSelectedModel(null),this.size.update({width:this.options.iconWidth}),this.maximumSize.update({width:this.options.iconWidth}),this.minimumSize.update({width:this.options.iconWidth})):(this.setFloatingModel(null),this.normalizeSelectedModel(),!this.sizeExpanded&&this.selectedModel&&this.selectedModel.waitForInitialRenderedSize().then((dims=>{this.setExpandedSize(dims.width+this.options.iconWidth)})),this.maximumSize.update({width:0}),this.minimumSize.update({width:0}),this.size.update({width:this.sizeExpanded})),this.invalidateLayout(),this}_getRootModel(){return this.getRootModel()}setFloatingModel(model){if(null===model)return this.floatingWindow.delete(),this;this.floatingWindow.setChild(model);const root=this._getRootModel();return(null==root?void 0:root.addFloatingWindow)&&root.addFloatingWindow(this.floatingWindow),this}}WorkspaceTrayModel.NAME="srw-tray";var S,emotion_styled_browser_esm=__webpack_require__("../node_modules/.pnpm/@emotion+styled@11.11.0_@emotion+react@11.11.1_@types+react@18.2.14_react@18.2.0/node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"),lodash=__webpack_require__("../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/lodash.js"),jsx_runtime=__webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");!function(S){S.MicroLayout=emotion_styled_browser_esm.Z.div`
    display: flex;
    flex-direction: column;
    align-items: stretch;
    flex-grow: 1;
    overflow: hidden;
  `,S.Scrollable=(0,emotion_styled_browser_esm.Z)(dist.Oy)`
    display: flex;
    flex-direction: column;
    overflow-y: scroll;
    align-items: stretch;

    ::-webkit-scrollbar {
      width: 0;
    }
  `}(S||(S={}));const MicroWrapper=props=>{const ref=(0,react.useRef)();props.node.mode===WorkspaceTrayMode.COLLAPSED&&((0,dist.yU)({forwardRef:ref,dimension:props.model.r_dimensions,engine:props.engine}),(0,dist.P0)({forwardRef:props.scrollRef,dimension:props.model.r_dimensions}));let selected=props.node.selectedModel&&props.node.selectedModel.id===props.model.id;const renderer=props.factory.getRendererForModel(props.model);return(0,jsx_runtime.jsx)(dist.up,{model:props.model,engine:props.engine,children:(0,jsx_runtime.jsx)("div",{ref,onClick:()=>{props.node.selectedModel===props.model&&props.node.mode===WorkspaceTrayMode.COLLAPSED?props.node.setSelectedModel(null):props.node.setSelectedModel(props.model)},children:(null==renderer?void 0:renderer.renderIcon({model:props.model,selected,parent:props.node}))||(0,jsx_runtime.jsx)("span",{children:"?"})})})};MicroWrapper.displayName="MicroWrapper";const MicroLayoutWidget=props=>{const ref=(0,react.useRef)();return(0,jsx_runtime.jsx)(S.MicroLayout,{className:props.className,children:(0,jsx_runtime.jsx)(S.Scrollable,{forwardRef:ref,vertical:!0,engine:props.engine,dropped:({model,index})=>{props.node.addModel(model,index),props.engine.normalize()},children:lodash.map(props.node.getFlattened(),(child=>(0,react.createElement)(MicroWrapper,{scrollRef:ref,...props,model:child,key:child.id})))})})};var TrayWidget_S;MicroLayoutWidget.displayName="MicroLayoutWidget",MicroWrapper.__docgenInfo={description:"",methods:[],displayName:"MicroWrapper"},MicroLayoutWidget.__docgenInfo={description:"",methods:[],displayName:"MicroLayoutWidget"},function(S){S.Container=emotion_styled_browser_esm.Z.div`
    display: flex;
    flex-direction: column;
    position: relative;
    height: 100%;
    width: 100%;
    min-height: 0;
  `,S.MicroLayout=(0,emotion_styled_browser_esm.Z)(MicroLayoutWidget)`
    flex-grow: 1;
  `,S.MicroLayoutShrink=(0,emotion_styled_browser_esm.Z)(MicroLayoutWidget)`
    flex-grow: 0;
    flex-shrink: 0;
  `,S.Content=emotion_styled_browser_esm.Z.div`
    display: flex;
    flex-grow: 1;
    flex-direction: row;
    min-height: 0;
  `,S.PanelContent=emotion_styled_browser_esm.Z.div`
    display: flex;
    flex-grow: 1;
    min-width: 0;
  `}(TrayWidget_S||(TrayWidget_S={}));const PanelContent=props=>{const ref=(0,dist.KA)({model:props.model,engine:props.engine});return(0,jsx_runtime.jsx)(TrayWidget_S.PanelContent,{ref,children:props.engine.getFactory(props.model).generateContent({model:props.model,engine:props.engine})})};PanelContent.displayName="PanelContent";const TrayContentExpanded=props=>{const forceUpdate=(0,dist.NW)();let cont=[(0,jsx_runtime.jsx)(TrayWidget_S.MicroLayoutShrink,{node:props.node,engine:props.engine,factory:props.factory},"a"),(0,jsx_runtime.jsx)(PanelContent,{engine:props.engine,model:props.node.getSelectedModel()},"b")];return props.node.iconBarPosition===TrayIconPosition.RIGHT&&cont.reverse(),(0,react.useEffect)((()=>props.node.registerListener({iconPositionChanged:()=>{forceUpdate()}})),[]),(0,jsx_runtime.jsx)(TrayWidget_S.Content,{children:cont})};TrayContentExpanded.displayName="TrayContentExpanded";const TrayContentShrink=props=>(0,jsx_runtime.jsx)(TrayWidget_S.MicroLayout,{node:props.node,engine:props.engine,factory:props.factory});TrayContentShrink.displayName="TrayContentShrink";const TrayWidget=props=>{const forceUpdate=(0,dist.NW)();return(0,react.useEffect)((()=>props.node.registerListener({selectionChanged:()=>{forceUpdate()}})),[]),(0,jsx_runtime.jsxs)(TrayWidget_S.Container,{className:props.className,children:[(0,jsx_runtime.jsx)(dist.up,{model:props.node,engine:props.engine,children:props.header}),props.node.mode===WorkspaceTrayMode.NORMAL?(0,jsx_runtime.jsx)(TrayContentExpanded,{...props}):(0,jsx_runtime.jsx)(TrayContentShrink,{...props})]})};TrayWidget.displayName="TrayWidget",PanelContent.__docgenInfo={description:"",methods:[],displayName:"PanelContent"},TrayContentExpanded.__docgenInfo={description:"",methods:[],displayName:"TrayContentExpanded"},TrayContentShrink.__docgenInfo={description:"",methods:[],displayName:"TrayContentShrink"},TrayWidget.__docgenInfo={description:"",methods:[],displayName:"TrayWidget"};class WorkspaceTrayFactory extends dist.Rr{constructor(options){super(WorkspaceTrayModel.NAME),this.options=options,this.registerListener({modelGenerated:({model})=>{options.installIconPositionListener&&(model=>{const setupPositioning=()=>{const parent=model.getRootModel();0!==parent.r_dimensions.size.width&&(model.r_dimensions.isAligned(parent.r_dimensions,dist.v2.LEFT)?model.setIconPosition(TrayIconPosition.LEFT):model.setIconPosition(TrayIconPosition.RIGHT))};model.waitForInitialRenderedSize().then((dims=>{model.getRootModel().r_dimensions.invalidate(!0),setupPositioning()})),model.r_dimensions.registerListener({updated:()=>{setupPositioning()}})})(model),options.installEngineLockListener&&((model,engine)=>{model.floatingWindow.setDraggable(!engine.locked),engine.registerListener({lockUpdated:()=>{model.floatingWindow.setDraggable(!engine.locked)}})})(model,this.engine)}})}_generateModel(){return new WorkspaceTrayModel({iconWidth:50,factory:this.options.windowFactory})}generateTrayHeader(event){return null}generateContent(event){return(0,jsx_runtime.jsx)(TrayWidget,{factory:this,header:this.generateTrayHeader(event),node:event.model,engine:event.engine})}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,